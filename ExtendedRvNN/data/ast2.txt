1	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 
2	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
4	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
5	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
6	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } } 	1
7	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
8	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
9	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
10	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
11	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
12	void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
13	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
14	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
15	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
16	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
17	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
18	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
19	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
20	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
21	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
22	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
23	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
24	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
25	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
26	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
27	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
28	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
29	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
30	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
31	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
32	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
33	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
34	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
35	void FUN ( ) { int i , j ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { fscanf ( stdin , "%d" , & data ) ; } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
36	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
37	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
38	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
39	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
40	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
41	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
42	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
43	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
44	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
45	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
46	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
47	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
48	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
49	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
50	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
51	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
52	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
53	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
54	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
55	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
56	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
57	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
58	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
59	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
60	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
61	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
62	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
63	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
64	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
65	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
66	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
67	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	1
68	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
69	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
70	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
71	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
72	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
73	static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { fscanf ( stdin , "%d" , & data ) ; } else { fscanf ( stdin , "%d" , & data ) ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
74	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	0
75	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
76	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
77	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
78	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
79	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
80	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
81	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
82	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
83	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
84	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
85	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
86	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } badSink ( data ) ; } 	1
87	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
88	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
89	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
90	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
91	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
92	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
93	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
94	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
95	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
96	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
97	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
98	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
99	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
100	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
101	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
102	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
103	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
104	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
105	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
106	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
107	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
108	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
109	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
110	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
111	static void FUN ( ) { int data ; data = - 1 ; goto source ; source : data = 7 ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
112	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
113	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
114	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
115	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
116	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
117	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
118	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
119	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
120	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
121	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
122	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
123	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { int k ; for ( k = 0 ; k < 1 ; k ++ ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
124	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
125	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
126	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
127	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { goto sink ; sink : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } 	1
128	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
129	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
130	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
131	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
132	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
133	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
134	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
135	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
136	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
137	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
138	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
139	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } } 	1
140	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
141	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
142	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
143	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
144	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
145	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
146	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
147	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
148	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
149	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
150	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
151	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
152	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
153	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
154	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
155	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
156	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
157	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
158	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
159	static void badSink ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 
160	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
161	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
162	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
163	static void FUN ( ) { int h ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
164	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
165	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
166	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
167	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
168	void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
169	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
170	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
171	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
172	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 
173	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
174	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
175	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
176	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
177	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
178	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
179	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
180	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
181	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
182	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
183	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
184	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
185	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
186	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
187	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
188	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
189	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
190	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
191	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
192	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
193	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
194	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
195	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
196	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
197	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
198	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
199	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
200	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
201	void FUN ( ) { int i ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
202	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
203	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
204	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
205	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
206	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
207	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
208	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
209	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
210	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
211	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
212	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
213	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
214	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
215	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
216	typedef long unsigned int size_t; static void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
217	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = 7 ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
218	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; goto source ; source : { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
219	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
220	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
221	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
222	typedef signed long long int64_t ; static void badSink ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 
223	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
224	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
225	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
226	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
227	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
228	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
229	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; while ( 1 ) { data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
230	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
231	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
232	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
233	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
234	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
235	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
236	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
237	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
238	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
239	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
240	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
241	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
242	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
243	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
244	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
245	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
246	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
247	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
248	static void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
249	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } 	1
250	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
251	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
252	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
253	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
254	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
255	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
256	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
257	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static int FUN ( int data ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } 	0
258	static void FUN ( ) { int data ; data = - 1 ; fscanf ( stdin , "%d" , & data ) ; goodB2G1Static = 0 ; goodB2G1Sink ( data ) ; } 	0
259	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
260	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
261	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
262	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
263	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
264	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
265	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
266	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
267	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
268	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
269	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
270	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
271	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
272	void FUN ( void * dataVoidPtr ) { int * * dataPtr = ( int * * ) dataVoidPtr ; int * data = ( * dataPtr ) ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
273	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
274	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
275	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
276	void FUN ( ) { void * data ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; badSink ( data ) ; } 	1
277	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
278	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
279	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
280	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
281	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
282	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } } 	1
283	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; data = NULL ; { int * data = * dataPtr1 ; data = ( int * ) ALLOCA ( 10 ) ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
284	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
285	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
286	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
287	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
288	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
289	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
290	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
291	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
292	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
293	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
294	void FUN ( ) { int i ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
295	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
296	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
297	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
298	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = RAND32 ( ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
299	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
300	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
301	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
302	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
303	static void badSink ( int * data ) { { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 
304	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } } 	0
305	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
306	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
307	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
308	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
309	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
310	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 0 ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
311	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
312	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
313	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } } 	1
314	static void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; { int * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
315	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
316	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
317	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
318	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
319	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
320	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
321	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
322	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
323	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { int k ; for ( k = 0 ; k < 1 ; k ++ ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
324	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } } 	1
325	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * * dataPtr ) { twoIntsStruct * data = * dataPtr ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
326	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
327	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
328	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
329	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
330	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataGoodBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	0
331	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; switch ( 6 ) { case 6 : data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } break ; default : printLine ( STR ) ; break ; } } 	0
332	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
333	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
334	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
335	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
336	static void FUN ( ) { int data ; data = - 1 ; goto source ; source : data = 7 ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
337	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
338	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
339	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
340	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
341	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
342	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { fscanf ( stdin , "%d" , & data ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
343	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
344	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
345	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
346	void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = badSink ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
347	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
348	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
349	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
350	static void badSink ( int data ) { if ( badStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 
351	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
352	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
353	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
354	static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodG2BSink ; data = - 1 ; data = 7 ; funcPtr ( data ) ; } 	0
355	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
356	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
357	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
358	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
359	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
360	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
361	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; while ( 1 ) { data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
362	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;static void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = goodG2BSink ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
363	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
364	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
365	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
366	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
367	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
368	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
369	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
370	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
371	static void FUN ( int data ) { if ( goodG2BStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
372	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
373	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
374	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 
375	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
376	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
377	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
378	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
379	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
380	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : fscanf ( stdin , "%d" , & data ) ; break ; default : printLine ( STR ) ; break ; } switch ( 8 ) { case 7 : printLine ( STR ) ; break ; default : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
381	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
382	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataBadBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
383	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
384	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
385	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
386	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
387	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	1
388	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
389	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; break ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
390	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
391	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
392	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
393	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
394	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
395	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
396	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
397	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
398	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
399	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
400	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
401	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
402	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
403	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
404	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
405	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
406	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
407	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
408	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
409	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
410	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
411	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
412	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
413	static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; data = 7 ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
414	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
415	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
416	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = badSink ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
417	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
418	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
419	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
420	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
421	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
422	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
423	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
424	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
425	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
426	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
427	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
428	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
429	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
430	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
431	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { void * * dataPtr = ( void * * ) dataVoidPtr ; void * data = ( * dataPtr ) ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
432	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
433	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
434	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
435	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
436	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
437	static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
438	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } } 	0
439	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
440	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
441	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
442	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = goodG2BSink ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
443	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
444	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
445	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
446	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	0
447	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
448	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
449	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
450	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
451	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
452	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
453	static void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; data = NULL ; { int * data = * dataPtr1 ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
454	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
455	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * data ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
456	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
457	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
458	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
459	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
460	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
461	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
462	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
463	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
464	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
465	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
466	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
467	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
468	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
469	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
470	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
471	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
472	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
473	static void FUN ( ) { int * data ; data = NULL ; switch ( 6 ) { case 6 : data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; break ; default : printLine ( STR ) ; break ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
474	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
475	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
476	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
477	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
478	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
479	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
480	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
481	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
482	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
483	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
484	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
485	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
486	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; switch ( 6 ) { case 6 : data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } break ; default : printLine ( STR ) ; break ; } } 	0
487	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
488	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
489	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
490	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
491	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
492	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
493	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
494	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
495	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
496	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
497	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
498	static void FUN ( int data ) { if ( goodB2G2Static ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
499	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
500	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
501	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
502	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( void * data ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } 	0
503	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
504	static void badSink ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 
505	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
506	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
507	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
508	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
509	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
510	static void FUN ( ) { int * data ; data = NULL ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; break ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
511	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
512	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
513	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
514	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	0
515	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
516	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
517	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
518	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
519	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
520	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
521	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
522	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
523	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
524	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	0
525	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
526	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
527	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
528	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } } 	0
529	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
530	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
531	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } 	0
532	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
533	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
534	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
535	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
536	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
537	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
538	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
539	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
540	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
541	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
542	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
543	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
544	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
545	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
546	void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; { int * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
547	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
548	void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
549	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
550	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
551	static void FUN ( ) { int * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
552	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
553	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
554	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
555	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
556	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
557	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
558	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
559	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
560	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
561	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
562	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
563	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
564	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
565	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
566	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
567	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
568	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
569	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
570	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
571	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { fscanf ( stdin , "%d" , & data ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
572	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
573	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
574	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
575	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
576	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
577	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
578	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
579	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
580	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
581	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
582	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
583	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
584	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
585	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
586	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
587	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
588	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
589	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
590	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
591	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
592	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
593	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
594	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
595	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
596	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
597	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
598	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
599	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
600	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
601	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
602	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
603	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
604	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
605	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
606	static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
607	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
608	static void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
609	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
610	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
611	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
612	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
613	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
614	typedef long unsigned int size_t; void FUN ( ) { int i ; int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
615	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
616	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
617	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
618	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
619	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
620	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
621	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
622	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 
623	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
624	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
625	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
626	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
627	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
628	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
629	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
630	static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
631	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
632	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
633	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
634	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
635	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
636	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
637	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
638	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
639	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
640	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
641	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
642	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
643	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
644	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
645	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
646	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
647	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
648	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
649	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
650	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
651	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
652	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
653	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
654	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
655	static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { fscanf ( stdin , "%d" , & data ) ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
656	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
657	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
658	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
659	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } } 	0
660	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
661	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
662	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
663	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
664	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
665	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
666	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
667	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
668	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
669	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
670	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
671	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; { int64_t * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } } 	0
672	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
673	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; { int64_t * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	0
674	void FUN ( ) { int * data ; data = NULL ; switch ( 6 ) { case 6 : data = ( int * ) ALLOCA ( 10 ) ; break ; default : printLine ( STR ) ; break ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
675	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
676	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
677	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
678	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
679	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
680	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
681	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
682	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
683	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
684	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
685	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
686	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
687	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
688	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
689	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
690	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
691	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
692	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
693	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
694	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
695	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
696	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
697	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
698	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
699	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
700	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
701	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
702	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
703	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
704	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
705	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
706	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
707	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
708	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
709	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
710	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
711	static void FUN ( ) { int h ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
712	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
713	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
714	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
715	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
716	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
717	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
718	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
719	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
720	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
721	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
722	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
723	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
724	static void FUN ( int data ) { if ( goodB2G1Static ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
725	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
726	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int h ; int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
727	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
728	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
729	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
730	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
731	void * FUN ( void * data ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; return data ; } 	1
732	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
733	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
734	static void FUN ( ) { int * data ; data = NULL ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; break ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
735	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
736	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
737	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
738	static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
739	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( (rand() % 2) ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
740	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
741	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
742	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
743	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
744	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
745	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
746	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
747	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
748	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } 	1
749	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
750	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
751	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
752	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
753	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
754	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
755	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
756	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
757	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
758	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
759	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
760	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
761	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	1
762	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
763	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
764	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
765	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
766	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
767	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
768	static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; data = 7 ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
769	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
770	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
771	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
772	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
773	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
774	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
775	static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
776	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
777	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
778	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
779	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
780	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
781	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
782	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
783	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
784	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
785	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
786	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
787	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
788	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
789	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
790	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
791	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
792	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
793	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
794	static void FUN ( int data ) { if ( goodG2BStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
795	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
796	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
797	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
798	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
799	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
800	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
801	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
802	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
803	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
804	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
805	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
806	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
807	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
808	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
809	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
810	static void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
811	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } badStatic = 1 ; badSink ( data ) ; } 	1
812	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
813	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
814	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
815	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
816	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
817	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
818	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
819	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
820	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
821	void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = badSink ; data = NULL ; data = ( int * ) ALLOCA ( 10 ) ; funcPtr ( data ) ; } 	1
822	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
823	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
824	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } } 	1
825	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
826	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
827	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
828	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
829	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
830	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
831	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
832	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
833	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
834	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
835	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
836	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( void * data ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } 	0
837	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
838	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
839	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
840	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
841	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
842	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
843	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
844	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
845	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
846	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
847	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
848	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
849	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
850	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
851	typedef signed long long int64_t ; void FUN ( ) { int i ; int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
852	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
853	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
854	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
855	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
856	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
857	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
858	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
859	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
860	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
861	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
862	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
863	typedef signed long long int64_t ; void FUN ( void * dataVoidPtr ) { int64_t * * dataPtr = ( int64_t * * ) dataVoidPtr ; int64_t * data = ( * dataPtr ) ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
864	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
865	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = badSink ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
866	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
867	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
868	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
869	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
870	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
871	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
872	void FUN ( ) { int i ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
873	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
874	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { fscanf ( stdin , "%d" , & data ) ; } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
875	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
876	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
877	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
878	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
879	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
880	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
881	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
882	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } } 	0
883	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
884	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
885	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
886	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
887	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
888	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
889	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
890	static void FUN ( ) { int h ; int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
891	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
892	static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; data = 10 ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
893	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
894	static void FUN ( ) { int h ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
895	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
896	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
897	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
898	void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	1
899	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
900	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
901	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
902	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
903	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
904	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
905	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
906	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
907	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
908	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
909	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
910	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
911	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
912	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
913	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
914	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
915	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
916	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
917	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
918	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
919	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
920	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
921	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
922	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
923	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
924	typedef long unsigned int size_t; static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
925	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
926	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	1
927	static void FUN ( int data ) { if ( goodB2G2Static ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
928	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
929	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
930	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
931	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
932	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
933	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
934	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
935	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
936	void FUN ( ) { int i ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
937	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
938	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
939	typedef signed long long int64_t ; void FUN ( void * dataVoidPtr ) { int64_t * * dataPtr = ( int64_t * * ) dataVoidPtr ; int64_t * data = ( * dataPtr ) ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
940	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
941	typedef long unsigned int size_t; static void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
942	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } } 	0
943	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
944	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
945	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
946	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { int k ; for ( k = 0 ; k < 1 ; k ++ ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
947	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
948	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
949	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
950	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
951	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
952	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
953	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
954	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
955	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
956	void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; { int * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
957	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
958	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
959	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
960	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
961	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
962	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
963	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
964	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
965	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
966	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
967	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
968	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
969	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
970	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
971	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } } 	0
972	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
973	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
974	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
975	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
976	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
977	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
978	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
979	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
980	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
981	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
982	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
983	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
984	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; goto source ; source : data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
985	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
986	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
987	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
988	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
989	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
990	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
991	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
992	void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
993	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
994	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
995	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
996	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
997	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
998	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
999	static void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1000	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1001	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
1002	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
1003	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1004	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1005	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1006	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
1007	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
1008	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1009	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1010	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
1011	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1012	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1013	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1014	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
1015	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
1016	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1017	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
1018	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1019	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
1020	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
1021	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1022	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1023	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1024	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1025	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;int FUN ( int data ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } 	1
1026	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1027	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1028	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1029	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1030	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
1031	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1032	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
1033	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1034	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1035	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1036	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1037	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
1038	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1039	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1040	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1041	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1042	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1043	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1044	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1045	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1046	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1047	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { int j ; for ( j = 0 ; j < 1 ; j ++ ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
1048	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
1049	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1050	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1051	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1052	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1053	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1054	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
1055	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1056	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1057	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1058	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
1059	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1060	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
1061	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
1062	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1063	void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1064	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1065	static void FUN ( ) { int h ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1066	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = 7 ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
1067	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { int h ; twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
1068	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1069	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
1070	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1071	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1072	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
1073	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1074	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; goto source ; source : data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; goto sink ; sink : { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	0
1075	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
1076	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1077	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
1078	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
1079	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1080	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1081	static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1082	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
1083	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1084	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
1085	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1086	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1087	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1088	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
1089	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1090	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = 10 ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
1091	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
1092	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1093	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
1094	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1095	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
1096	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
1097	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1098	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1099	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1100	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1101	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
1102	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } } 	1
1103	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1104	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1105	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
1106	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1107	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1108	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1109	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1110	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
1111	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1112	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1113	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1114	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1115	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1116	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	0
1117	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1118	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	1
1119	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1120	static void FUN ( ) { int h ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
1121	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1122	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = RAND32 ( ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1123	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1124	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
1125	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1126	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } } 	1
1127	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
1128	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
1129	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
1130	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1131	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1132	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1133	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
1134	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1135	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1136	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
1137	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1138	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1139	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
1140	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1141	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1142	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
1143	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1144	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
1145	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
1146	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
1147	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
1148	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1149	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
1150	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
1151	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1152	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
1153	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
1154	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
1155	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1156	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1157	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1158	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1159	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
1160	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1161	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
1162	void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1163	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1164	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
1165	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1166	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1167	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1168	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1169	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
1170	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1171	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
1172	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1173	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1174	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
1175	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1176	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
1177	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	1
1178	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1179	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1180	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
1181	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1182	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
1183	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
1184	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1185	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1186	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
1187	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1188	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1189	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
1190	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1191	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1192	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1193	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
1194	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1195	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1196	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1197	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
1198	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
1199	static void FUN ( ) { void * data ; data = NULL ; data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; goodG2BSink ( data ) ; } 	0
1200	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1201	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1202	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( void * data ) { if ( goodB2G1Static ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
1203	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1204	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
1205	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
1206	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1207	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
1208	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1209	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1210	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1211	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1212	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1213	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1214	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1215	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1216	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1217	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
1218	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1219	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
1220	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1221	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1222	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } } 	1
1223	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1224	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1225	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1226	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1227	static void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; { int * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
1228	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
1229	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
1230	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
1231	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
1232	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
1233	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * * dataPtr ) { twoIntsStruct * data = * dataPtr ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
1234	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1235	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
1236	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1237	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
1238	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
1239	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1240	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
1241	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
1242	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
1243	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
1244	static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1245	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
1246	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1247	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1248	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1249	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1250	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
1251	void FUN ( ) { int data ; data = - 1 ; data = badSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
1252	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
1253	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
1254	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
1255	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1256	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
1257	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1258	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
1259	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } } 	0
1260	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1261	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1262	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
1263	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1264	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1265	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1266	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; { twoIntsStruct * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } } 	1
1267	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1268	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
1269	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; goto source ; source : data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; goto sink ; sink : { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } 	0
1270	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
1271	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
1272	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
1273	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
1274	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1275	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1276	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
1277	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
1278	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
1279	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1280	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
1281	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1282	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1283	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1284	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } } 	1
1285	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1286	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1287	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1288	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1289	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1290	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
1291	static void FUN ( ) { int data ; data = - 1 ; data = goodB2GSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
1292	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1293	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1294	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
1295	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1296	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
1297	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1298	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1299	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; { twoIntsStruct * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } } 	0
1300	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1301	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
1302	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
1303	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
1304	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1305	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
1306	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
1307	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
1308	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1309	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1310	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1311	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1312	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
1313	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1314	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1315	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1316	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1317	typedef long unsigned int size_t; void FUN ( int * * dataPtr ) { int * data = * dataPtr ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
1318	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
1319	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1320	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
1321	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1322	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
1323	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
1324	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1325	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1326	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1327	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1328	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
1329	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
1330	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1331	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
1332	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } } 	0
1333	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
1334	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
1335	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1336	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1337	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1338	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
1339	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1340	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1341	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1342	void FUN ( ) { int data ; data = - 1 ; if ( true ) { fscanf ( stdin , "%d" , & data ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1343	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
1344	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1345	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1346	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
1347	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1348	void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 ) ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1349	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
1350	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1351	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1352	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
1353	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1354	void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; data = RAND32 ( ) ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1355	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
1356	static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { data = RAND32 ( ) ; } else { data = RAND32 ( ) ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1357	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
1358	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1359	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1360	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1361	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1362	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1363	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
1364	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1365	static void FUN ( ) { int data ; data = - 1 ; data = goodB2GSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
1366	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1367	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
1368	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1369	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1370	static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodG2BSink ; data = - 1 ; data = 7 ; funcPtr ( data ) ; } 	0
1371	typedef long unsigned int size_t; void FUN ( int * dataArray [ ] ) { int * data = dataArray [ 2 ] ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
1372	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1373	static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1374	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1375	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1376	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1377	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1378	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1379	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1380	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
1381	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1382	static void FUN ( ) { void * data ; void ( * funcPtr ) ( void * ) = goodB2GSink ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; funcPtr ( data ) ; } 	0
1383	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
1384	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1385	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
1386	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
1387	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
1388	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1389	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1390	static void badSink ( int data ) { if ( badStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 
1391	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1392	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { switch ( 6 ) { case 6 : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } break ; default : printLine ( STR ) ; break ; } } 	0
1393	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1394	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1395	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1396	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1397	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } } 	0
1398	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
1399	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
1400	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( void * data ) { if ( goodB2G2Static ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
1401	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1402	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
1403	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
1404	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
1405	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
1406	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1407	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1408	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1409	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1410	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1411	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1412	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1413	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1414	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1415	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1416	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
1417	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
1418	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1419	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
1420	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1421	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
1422	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1423	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1424	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1425	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1426	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1427	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1428	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1429	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1430	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
1431	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
1432	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
1433	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1434	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1435	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
1436	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1437	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1438	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1439	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1440	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1441	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1442	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1443	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1444	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1445	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
1446	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
1447	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1448	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
1449	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1450	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1451	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
1452	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1453	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
1454	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1455	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
1456	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1457	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1458	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } } 	0
1459	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1460	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
1461	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1462	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1463	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
1464	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1465	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1466	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
1467	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
1468	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
1469	static void FUN ( ) { int data ; data = - 1 ; goto source ; source : data = 7 ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
1470	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1471	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
1472	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
1473	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
1474	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1475	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1476	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1477	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
1478	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1479	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
1480	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1481	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1482	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
1483	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
1484	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1485	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
1486	static void FUN ( ) { int data ; data = - 1 ; goto source ; source : fscanf ( stdin , "%d" , & data ) ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
1487	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; while ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; break ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
1488	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1489	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
1490	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1491	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { switch ( 6 ) { case 6 : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } break ; default : printLine ( STR ) ; break ; } } 	0
1492	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
1493	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1494	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1495	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } } 	1
1496	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1497	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
1498	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1499	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1500	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1501	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1502	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1503	static void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1504	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1505	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
1506	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1507	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1508	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1509	typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
1510	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
1511	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1512	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1513	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1514	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1515	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } } 	1
1516	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1517	static void FUN ( ) { int h ; int * data ; data = NULL ; for ( h = 0 ; h < 1 ; h ++ ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1518	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
1519	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1520	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
1521	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } } 	0
1522	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; while ( 1 ) { data = dataBadBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1523	static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodB2GSink ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } funcPtr ( data ) ; } 	0
1524	static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1525	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1526	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1527	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1528	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1529	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1530	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1531	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1532	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
1533	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1534	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1535	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1536	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1537	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
1538	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1539	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1540	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1541	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
1542	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1543	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1544	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1545	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1546	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
1547	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1548	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1549	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1550	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1551	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
1552	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1553	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1554	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1555	void FUN ( ) { int data ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
1556	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { int i ; twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1557	static void badSink ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 
1558	void FUN ( void * dataVoidPtr ) { int * dataPtr = ( int * ) dataVoidPtr ; int data = ( * dataPtr ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
1559	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1560	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1561	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; while ( 1 ) { data = dataBadBuffer ; break ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1562	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
1563	static void FUN ( ) { int data ; data = - 1 ; data = 10 ; goodB2G2Static = 1 ; goodB2G2Sink ( data ) ; } 	0
1564	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1565	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
1566	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1567	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	0
1568	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1569	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
1570	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1571	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1572	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
1573	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
1574	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
1575	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
1576	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1577	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
1578	static void FUN ( ) { int h ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1579	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1580	static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1581	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
1582	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1583	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataBadBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
1584	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1585	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
1586	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1587	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1588	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
1589	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
1590	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
1591	void FUN ( void * dataVoidPtr ) { int * dataPtr = ( int * ) dataVoidPtr ; int data = ( * dataPtr ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
1592	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
1593	static void FUN ( ) { int data ; data = - 1 ; goto source ; source : data = 10 ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
1594	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1595	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
1596	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
1597	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1598	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
1599	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1600	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1601	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
1602	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
1603	void FUN ( ) { int data ; data = - 1 ; if ( true ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1604	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1605	void FUN ( int * dataArray [ ] ) { int * data = dataArray [ 2 ] ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1606	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
1607	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1608	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1609	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1610	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
1611	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1612	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
1613	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
1614	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1615	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1616	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
1617	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1618	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } } 	1
1619	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
1620	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1621	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1622	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
1623	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
1624	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
1625	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } badSink ( data ) ; } 	1
1626	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
1627	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1628	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
1629	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1630	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { int j ; for ( j = 0 ; j < 1 ; j ++ ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
1631	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
1632	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1633	typedef signed long long int64_t ; void FUN ( void * dataVoidPtr ) { int64_t * * dataPtr = ( int64_t * * ) dataVoidPtr ; int64_t * data = ( * dataPtr ) ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1634	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
1635	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1636	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
1637	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } } 	1
1638	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
1639	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; { int64_t * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	1
1640	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1641	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
1642	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1643	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
1644	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
1645	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { while ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } break ; } } 	1
1646	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1647	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
1648	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1649	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1650	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1651	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1652	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
1653	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
1654	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
1655	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
1656	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } } 	0
1657	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1658	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; goto source ; source : { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
1659	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1660	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
1661	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
1662	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	0
1663	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1664	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
1665	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
1666	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1667	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1668	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
1669	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	1
1670	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1671	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
1672	typedef signed long long int64_t ; void FUN ( int64_t * dataArray [ ] ) { int64_t * data = dataArray [ 2 ] ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1673	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1674	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { int h ; twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1675	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1676	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
1677	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1678	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
1679	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
1680	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1681	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1682	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1683	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1684	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1685	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1686	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
1687	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1688	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
1689	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1690	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
1691	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
1692	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1693	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1694	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
1695	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
1696	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
1697	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
1698	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1699	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
1700	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1701	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1702	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1703	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
1704	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1705	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1706	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1707	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
1708	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
1709	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
1710	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1711	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; { twoIntsStruct * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	0
1712	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1713	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1714	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1715	typedef long unsigned int size_t; static void badSink ( int * data ) { { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 
1716	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1717	typedef long unsigned int size_t; void FUN ( int * dataArray [ ] ) { int * data = dataArray [ 2 ] ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
1718	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
1719	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1720	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1721	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1722	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1723	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
1724	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
1725	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
1726	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
1727	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1728	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
1729	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1730	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1731	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
1732	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1733	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
1734	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
1735	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; { twoIntsStruct * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	1
1736	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1737	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1738	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1739	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1740	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
1741	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1742	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1743	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1744	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1745	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1746	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1747	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1748	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
1749	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
1750	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } } 	0
1751	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1752	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1753	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1754	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1755	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1756	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1757	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1758	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
1759	typedef long unsigned int size_t; static void FUN ( ) { int h ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1760	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1761	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1762	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1763	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
1764	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
1765	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1766	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
1767	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1768	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1769	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
1770	typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1771	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
1772	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1773	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1774	static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodB2GSink ; data = - 1 ; data = RAND32 ( ) ; funcPtr ( data ) ; } 	0
1775	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1776	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1777	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1778	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
1779	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1780	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
1781	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
1782	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; switch ( 6 ) { case 6 : data = ( int * ) ALLOCA ( 10 ) ; break ; default : printLine ( STR ) ; break ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
1783	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1784	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1785	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
1786	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
1787	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1788	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
1789	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1790	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
1791	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1792	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
1793	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
1794	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
1795	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1796	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1797	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1798	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int i , j ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1799	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1800	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1801	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
1802	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
1803	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1804	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1805	void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; data = NULL ; { int * data = * dataPtr1 ; data = ( int * ) ALLOCA ( 10 ) ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
1806	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1807	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1808	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
1809	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1810	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1811	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
1812	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1813	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1814	static void FUN ( ) { int h , j ; int data ; data = - 1 ; for ( h = 0 ; h < 1 ; h ++ ) { data = 7 ; } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1815	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1816	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1817	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1818	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1819	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1820	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
1821	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1822	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
1823	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
1824	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1825	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void badSink ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 
1826	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
1827	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
1828	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1829	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1830	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1831	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1832	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
1833	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1834	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1835	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1836	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1837	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
1838	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1839	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1840	void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1841	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1842	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
1843	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1844	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1845	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1846	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; goto source ; source : data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1847	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	1
1848	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1849	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1850	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1851	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
1852	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1853	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1854	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; while ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; break ; } while ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } break ; } } 	1
1855	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * * dataPtr ) { twoIntsStruct * data = * dataPtr ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1856	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1857	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
1858	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
1859	typedef long unsigned int size_t; void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1860	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1861	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1862	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1863	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1864	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1865	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1866	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1867	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { twoIntsStruct * * dataPtr = ( twoIntsStruct * * ) dataVoidPtr ; twoIntsStruct * data = ( * dataPtr ) ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
1868	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	0
1869	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
1870	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1871	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1872	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
1873	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
1874	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
1875	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
1876	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1877	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1878	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1879	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1880	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
1881	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; while ( 1 ) { data = dataBadBuffer ; break ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
1882	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
1883	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1884	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1885	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1886	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
1887	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
1888	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1889	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1890	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
1891	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1892	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;int FUN ( int data ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } 	1
1893	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
1894	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1895	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1896	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1897	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1898	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
1899	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	0
1900	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1901	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
1902	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1903	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1904	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1905	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1906	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
1907	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1908	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1909	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
1910	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
1911	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1912	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } } 	0
1913	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1914	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
1915	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1916	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1917	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
1918	static void FUN ( ) { int i , k ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { data = 10 ; } for ( k = 0 ; k < 1 ; k ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1919	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
1920	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
1921	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
1922	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
1923	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
1924	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
1925	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
1926	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1927	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
1928	void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
1929	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1930	static void FUN ( ) { int * data ; data = NULL ; if ( (rand() % 2) ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1931	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
1932	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
1933	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
1934	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1935	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 0 ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
1936	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1937	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
1938	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
1939	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1940	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1941	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
1942	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
1943	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1944	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1945	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1946	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
1947	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
1948	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1949	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; goodG2BStatic = 1 ; goodG2BSink ( data ) ; } 	0
1950	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
1951	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * dataArray [ ] ) { twoIntsStruct * data = dataArray [ 2 ] ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
1952	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
1953	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
1954	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1955	static void FUN ( ) { int data ; data = - 1 ; data = 10 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
1956	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1957	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1958	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1959	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
1960	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
1961	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
1962	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
1963	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1964	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1965	static void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1966	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1967	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } } 	0
1968	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1969	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
1970	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
1971	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
1972	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
1973	static void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = goodG2BSink ; data = NULL ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; funcPtr ( data ) ; } 	0
1974	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1975	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
1976	static void badSink ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 
1977	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1978	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1979	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
1980	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
1981	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1982	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
1983	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
1984	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1985	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * * dataPtr ) { void * data = * dataPtr ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
1986	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } } 	1
1987	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
1988	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
1989	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
1990	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
1991	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
1992	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
1993	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1994	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
1995	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1996	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
1997	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
1998	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
1999	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2000	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2001	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
2002	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
2003	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
2004	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2005	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2006	static void FUN ( ) { int h ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
2007	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2008	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2009	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2010	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
2011	void FUN ( int dataArray [ ] ) { int data = dataArray [ 2 ] ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2012	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2013	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
2014	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
2015	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
2016	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataBadBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	1
2017	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
2018	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
2019	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2020	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2021	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2022	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } } 	1
2023	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2024	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2025	void FUN ( int * dataPtr ) { int data = * dataPtr ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2026	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
2027	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { switch ( 6 ) { case 6 : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } break ; default : printLine ( STR ) ; break ; } } 	1
2028	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2029	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
2030	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2031	typedef long unsigned int size_t; static void badSink ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 
2032	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
2033	static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2034	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void badSink ( void * data ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 
2035	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2036	void FUN ( ) { int i ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2037	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2038	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
2039	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
2040	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
2041	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	0
2042	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2043	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2044	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2045	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
2046	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
2047	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2048	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2049	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
2050	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 
2051	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
2052	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
2053	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2054	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
2055	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2056	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2057	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2058	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2059	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
2060	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2061	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2062	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
2063	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2064	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2065	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2066	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2067	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2068	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2069	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
2070	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
2071	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
2072	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
2073	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
2074	static void FUN ( ) { int data ; data = - 1 ; goto source ; source : data = 7 ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
2075	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2076	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
2077	typedef long unsigned int size_t; void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2078	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
2079	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
2080	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2081	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2082	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2083	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
2084	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2085	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2086	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2087	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2088	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2089	static void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2090	typedef signed long long int64_t ; void FUN ( void * dataVoidPtr ) { int64_t * * dataPtr = ( int64_t * * ) dataVoidPtr ; int64_t * data = ( * dataPtr ) ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
2091	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2092	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2093	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
2094	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
2095	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2096	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2097	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
2098	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2099	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
2100	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
2101	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2102	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2103	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2104	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2105	void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = badSink ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
2106	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 
2107	typedef long unsigned int size_t; static void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2108	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2109	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2110	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2111	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2112	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
2113	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2114	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2115	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2116	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	1
2117	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2118	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2119	static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; data = 7 ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2120	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
2121	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2122	void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = RAND32 ( ) ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	1
2123	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
2124	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2125	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
2126	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
2127	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { goto sink ; sink : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } 	1
2128	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2129	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
2130	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
2131	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
2132	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2133	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2134	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2135	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2136	void FUN ( ) { int i ; int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2137	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2138	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2139	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2140	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;static void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = goodG2BSink ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
2141	void FUN ( int * * dataPtr ) { int * data = * dataPtr ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2142	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
2143	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2144	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } } 	0
2145	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2146	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 
2147	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
2148	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2149	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
2150	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2151	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = goodG2BSink ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
2152	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2153	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2154	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
2155	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2156	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2157	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
2158	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
2159	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2160	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2161	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2162	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
2163	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2164	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
2165	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2166	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
2167	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
2168	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2169	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2170	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
2171	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
2172	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2173	static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { data = 7 ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
2174	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2175	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2176	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
2177	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2178	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2179	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2180	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
2181	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2182	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
2183	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = badSink ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
2184	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 0 ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
2185	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;static void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = goodG2BSink ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
2186	static void badSink ( int data ) { if ( badStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 
2187	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
2188	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2189	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2190	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2191	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2192	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } break ; } } 	0
2193	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } } 	0
2194	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
2195	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2196	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
2197	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2198	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2199	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2200	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2201	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
2202	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
2203	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
2204	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2205	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
2206	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
2207	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
2208	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2209	static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2210	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2211	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
2212	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
2213	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2214	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
2215	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
2216	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2217	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
2218	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { twoIntsStruct * * dataPtr = ( twoIntsStruct * * ) dataVoidPtr ; twoIntsStruct * data = ( * dataPtr ) ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
2219	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2220	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } } 	0
2221	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
2222	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2223	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2224	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2225	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2226	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2227	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2228	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
2229	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
2230	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2231	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
2232	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2233	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2234	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2235	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2236	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
2237	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2238	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
2239	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2240	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = 7 ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
2241	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
2242	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2243	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2244	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
2245	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2246	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2247	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2248	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
2249	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2250	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2251	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
2252	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
2253	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2254	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
2255	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2256	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
2257	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2258	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
2259	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
2260	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2261	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
2262	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2263	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2264	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2265	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
2266	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2267	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2268	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2269	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
2270	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
2271	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2272	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
2273	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2274	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2275	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2276	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2277	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } } 	0
2278	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
2279	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2280	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2281	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
2282	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
2283	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2284	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
2285	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	1
2286	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
2287	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
2288	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
2289	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2290	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } 	0
2291	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2292	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
2293	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
2294	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
2295	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2296	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2297	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2298	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
2299	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2300	void FUN ( int * dataPtr ) { int data = * dataPtr ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2301	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
2302	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2303	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2304	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
2305	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2306	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
2307	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
2308	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
2309	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; goto source ; source : data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
2310	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2311	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
2312	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
2313	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2314	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2315	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
2316	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2317	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2318	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2319	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2320	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2321	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2322	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2323	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2324	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int i ; int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
2325	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2326	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
2327	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
2328	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
2329	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2330	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
2331	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2332	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
2333	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
2334	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
2335	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2336	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2337	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
2338	static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2339	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
2340	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
2341	static void badSink ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 
2342	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2343	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2344	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
2345	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2346	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
2347	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
2348	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } 	1
2349	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
2350	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2351	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	1
2352	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2353	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
2354	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2355	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
2356	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2357	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2358	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 ) ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
2359	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2360	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2361	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2362	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
2363	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
2364	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2365	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
2366	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
2367	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2368	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2369	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2370	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
2371	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2372	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2373	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2374	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
2375	static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2376	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
2377	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2378	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2379	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2380	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2381	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
2382	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2383	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2384	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
2385	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
2386	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
2387	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2388	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2389	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
2390	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2391	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2392	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
2393	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
2394	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
2395	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2396	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2397	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2398	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2399	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
2400	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2401	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void badSink ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
2402	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2403	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
2404	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
2405	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2406	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; goto source ; source : data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
2407	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
2408	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
2409	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2410	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2411	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; goto source ; source : data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
2412	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
2413	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
2414	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2415	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
2416	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2417	void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = badSink ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
2418	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2419	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2420	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2421	static void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2422	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
2423	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
2424	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2425	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2426	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2427	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; goto source ; source : data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2428	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
2429	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2430	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } } 	1
2431	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
2432	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2433	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2434	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2435	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
2436	void FUN ( ) { int data ; data = - 1 ; data = badSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2437	void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2438	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2439	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2440	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2441	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
2442	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2443	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2444	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
2445	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2446	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
2447	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2448	static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { data = 7 ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
2449	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2450	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2451	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2452	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
2453	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
2454	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2455	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2456	static void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2457	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2458	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
2459	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
2460	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2461	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2462	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2463	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2464	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2465	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2466	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2467	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2468	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2469	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2470	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
2471	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
2472	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2473	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
2474	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2475	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
2476	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2477	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
2478	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2479	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2480	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2481	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { int64_t * * dataPtr = ( int64_t * * ) dataVoidPtr ; int64_t * data = ( * dataPtr ) ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
2482	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
2483	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2484	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
2485	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
2486	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
2487	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
2488	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
2489	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2490	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2491	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2492	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2493	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2494	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2495	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2496	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
2497	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( (rand() % 2) ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } else { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( (rand() % 2) ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
2498	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2499	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
2500	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2501	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
2502	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
2503	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2504	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2505	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2506	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2507	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2508	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2509	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2510	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2511	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
2512	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
2513	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2514	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( false ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
2515	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2516	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2517	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2518	typedef long unsigned int size_t; static void FUN ( ) { int h ; int * data ; data = NULL ; for ( h = 0 ; h < 1 ; h ++ ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
2519	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
2520	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2521	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
2522	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
2523	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
2524	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2525	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2526	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
2527	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2528	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2529	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
2530	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
2531	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2532	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2533	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2534	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
2535	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
2536	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2537	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
2538	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2539	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
2540	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2541	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2542	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2543	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
2544	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2545	static void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
2546	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2547	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2548	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2549	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2550	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; { int64_t * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } } 	0
2551	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
2552	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
2553	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2554	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2555	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2556	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
2557	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2558	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
2559	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
2560	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
2561	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2562	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2563	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2564	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
2565	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
2566	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
2567	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2568	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
2569	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
2570	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
2571	int FUN ( int data ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } return data ; } 	1
2572	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
2573	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
2574	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
2575	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2576	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2577	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
2578	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2579	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2580	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
2581	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2582	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;static void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = goodG2BSink ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
2583	void FUN ( ) { int * data ; data = NULL ; goto source ; source : data = ( int * ) ALLOCA ( 10 ) ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2584	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
2585	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2586	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2587	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
2588	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
2589	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
2590	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2591	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 
2592	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2593	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2594	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2595	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
2596	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2597	static void FUN ( ) { int data ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } goodB2G1Static = 0 ; goodB2G1Sink ( data ) ; } 	0
2598	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
2599	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2600	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2601	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2602	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
2603	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2604	static void FUN ( ) { int h ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2605	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
2606	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
2607	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2608	void FUN ( ) { int i ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
2609	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataGoodBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	0
2610	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
2611	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2612	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
2613	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
2614	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2615	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2616	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2617	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
2618	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
2619	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2620	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
2621	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2622	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
2623	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2624	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2625	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
2626	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2627	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { int k ; for ( k = 0 ; k < 1 ; k ++ ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2628	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2629	void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 10 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
2630	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } } 	1
2631	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; goto source ; source : data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
2632	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2633	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
2634	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2635	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
2636	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2637	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
2638	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2639	static void FUN ( ) { int h ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
2640	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
2641	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2642	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2643	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2644	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
2645	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
2646	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2647	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2648	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2649	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
2650	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2651	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2652	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2653	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2654	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2655	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = 10 ; break ; default : printLine ( STR ) ; break ; } switch ( 8 ) { case 7 : printLine ( STR ) ; break ; default : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
2656	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
2657	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
2658	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2659	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2660	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
2661	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2662	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
2663	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
2664	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
2665	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
2666	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2667	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2668	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2669	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2670	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2671	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	1
2672	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2673	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void badSink ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 
2674	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
2675	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2676	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
2677	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
2678	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
2679	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
2680	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2681	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
2682	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2683	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2684	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2685	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2686	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2687	static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2688	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2689	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } } 	1
2690	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
2691	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2692	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2693	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2694	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2695	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2696	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2697	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
2698	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
2699	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2700	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
2701	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
2702	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
2703	static void badSink ( int data ) { if ( badStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 
2704	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
2705	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2706	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2707	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2708	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2709	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2710	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = badSink ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
2711	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
2712	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
2713	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2714	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
2715	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2716	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
2717	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
2718	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
2719	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
2720	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2721	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2722	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
2723	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
2724	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
2725	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
2726	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
2727	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
2728	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
2729	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
2730	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2731	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2732	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2733	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2734	void FUN ( int * dataArray [ ] ) { int * data = dataArray [ 2 ] ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2735	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
2736	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2737	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2738	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2739	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2740	static void FUN ( int data ) { if ( goodB2G2Static ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2741	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
2742	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2743	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2744	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2745	static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2746	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
2747	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
2748	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
2749	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
2750	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
2751	static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2752	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
2753	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
2754	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2755	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
2756	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
2757	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2758	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
2759	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2760	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
2761	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2762	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
2763	static void FUN ( ) { int data ; data = - 1 ; fscanf ( stdin , "%d" , & data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
2764	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
2765	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2766	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2767	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2768	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2769	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2770	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
2771	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
2772	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
2773	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
2774	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
2775	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
2776	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2777	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
2778	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
2779	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2780	static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2781	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2782	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
2783	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2784	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2785	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
2786	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2787	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2788	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
2789	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2790	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
2791	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2792	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
2793	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2794	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	0
2795	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2796	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { int i ; twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
2797	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
2798	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2799	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2800	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2801	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2802	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
2803	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2804	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2805	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2806	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2807	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2808	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
2809	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; { twoIntsStruct * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } } 	0
2810	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
2811	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 
2812	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2813	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
2814	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2815	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } } 	1
2816	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
2817	typedef signed long long int64_t ; typedef long unsigned int size_t; static void badSink ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 
2818	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
2819	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2820	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2821	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; while ( 1 ) { data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
2822	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
2823	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
2824	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2825	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
2826	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
2827	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2828	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2829	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
2830	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
2831	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2832	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2833	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	0
2834	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
2835	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
2836	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
2837	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
2838	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
2839	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2840	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2841	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2842	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2843	static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { data = 7 ; } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2844	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2845	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
2846	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2847	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2848	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2849	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
2850	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2851	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2852	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
2853	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2854	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; goodG2BStatic = 1 ; goodG2BSink ( data ) ; } 	0
2855	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
2856	typedef long unsigned int size_t; static void FUN ( ) { int h , j ; void * data ; data = NULL ; for ( h = 0 ; h < 1 ; h ++ ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } for ( j = 0 ; j < 1 ; j ++ ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
2857	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
2858	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2859	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
2860	void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
2861	typedef signed long long int64_t ; void FUN ( ) { int i ; int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
2862	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2863	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2864	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2865	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2866	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2867	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2868	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
2869	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
2870	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2871	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2872	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
2873	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2874	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2875	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
2876	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2877	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2878	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2879	static void FUN ( ) { int data ; data = - 1 ; data = goodB2GSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
2880	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2881	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2882	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2883	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2884	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
2885	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
2886	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2887	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
2888	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2889	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2890	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
2891	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2892	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2893	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
2894	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	1
2895	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
2896	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
2897	typedef long unsigned int size_t; void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
2898	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2899	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2900	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2901	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2902	static void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = goodG2BSink ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
2903	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2904	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( (rand() % 2) ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( (rand() % 2) ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } else { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
2905	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2906	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2907	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { switch ( 6 ) { case 6 : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } break ; default : printLine ( STR ) ; break ; } } 	0
2908	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2909	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
2910	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2911	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 
2912	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
2913	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
2914	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2915	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2916	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
2917	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2918	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
2919	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2920	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2921	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2922	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 
2923	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
2924	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2925	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
2926	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
2927	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
2928	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
2929	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2930	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
2931	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 
2932	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
2933	void FUN ( ) { int data ; data = - 1 ; if ( true ) { fscanf ( stdin , "%d" , & data ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
2934	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * * dataPtr ) { int64_t * data = * dataPtr ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
2935	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
2936	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
2937	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2938	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2939	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } } 	1
2940	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2941	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	0
2942	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
2943	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
2944	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
2945	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } } 	1
2946	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2947	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
2948	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
2949	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2950	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
2951	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataGoodBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } } 	0
2952	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2953	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2954	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
2955	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
2956	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
2957	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2958	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
2959	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2960	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
2961	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2962	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
2963	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
2964	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } } 	0
2965	void FUN ( ) { int data ; data = - 1 ; goto source ; source : data = 10 ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2966	void FUN ( ) { int data ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } badStatic = 1 ; badSink ( data ) ; } 	1
2967	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
2968	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2969	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
2970	void FUN ( ) { int data ; data = - 1 ; data = badSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
2971	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2972	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
2973	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2974	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
2975	static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
2976	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
2977	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2978	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
2979	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
2980	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
2981	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
2982	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
2983	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
2984	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2985	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
2986	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
2987	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2988	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; while ( 1 ) { data = dataBadBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
2989	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
2990	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
2991	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
2992	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
2993	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
2994	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
2995	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
2996	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
2997	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
2998	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
2999	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
3000	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
3001	typedef long unsigned int size_t; static void badSink ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 
3002	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
3003	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3004	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
3005	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3006	typedef signed long long int64_t ; static void FUN ( ) { int h ; int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3007	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
3008	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3009	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3010	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
3011	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
3012	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3013	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3014	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3015	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
3016	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
3017	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * dataArray [ ] ) { twoIntsStruct * data = dataArray [ 2 ] ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
3018	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
3019	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
3020	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3021	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3022	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3023	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
3024	static void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; data = NULL ; { int * data = * dataPtr1 ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
3025	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3026	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
3027	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
3028	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
3029	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
3030	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3031	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
3032	static void badSink ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 
3033	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
3034	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 
3035	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3036	void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = badSink ; data = - 1 ; data = RAND32 ( ) ; funcPtr ( data ) ; } 	1
3037	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3038	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
3039	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3040	static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3041	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3042	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
3043	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3044	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
3045	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3046	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3047	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3048	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3049	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3050	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
3051	void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	1
3052	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3053	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
3054	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } badStatic = 1 ; badSink ( data ) ; } 	1
3055	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
3056	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 
3057	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
3058	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3059	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
3060	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3061	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
3062	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
3063	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3064	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
3065	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = RAND32 ( ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3066	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
3067	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3068	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3069	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
3070	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3071	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	0
3072	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { goto sink ; sink : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } 	0
3073	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
3074	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
3075	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3076	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3077	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
3078	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3079	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
3080	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3081	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3082	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	0
3083	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
3084	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3085	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3086	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3087	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3088	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
3089	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
3090	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
3091	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
3092	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * dataArray [ ] ) { void * data = dataArray [ 2 ] ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
3093	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3094	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
3095	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3096	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
3097	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
3098	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3099	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3100	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
3101	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3102	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3103	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3104	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3105	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
3106	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3107	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3108	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3109	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
3110	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3111	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3112	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3113	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3114	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
3115	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } } 	0
3116	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3117	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3118	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3119	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3120	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	0
3121	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
3122	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3123	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
3124	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3125	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
3126	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3127	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
3128	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3129	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
3130	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3131	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3132	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
3133	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3134	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3135	void FUN ( ) { void * data ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; badStatic = 1 ; badSink ( data ) ; } 	1
3136	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3137	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3138	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3139	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3140	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
3141	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3142	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = 7 ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
3143	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3144	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
3145	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	1
3146	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3147	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3148	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3149	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
3150	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3151	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3152	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
3153	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 
3154	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
3155	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void badSink ( void * data ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 
3156	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
3157	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
3158	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
3159	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3160	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
3161	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
3162	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
3163	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
3164	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3165	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
3166	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3167	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
3168	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3169	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 
3170	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3171	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } } 	1
3172	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3173	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3174	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3175	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3176	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
3177	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
3178	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; goto source ; source : data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3179	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3180	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3181	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
3182	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
3183	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
3184	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3185	typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3186	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
3187	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3188	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3189	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3190	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3191	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3192	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
3193	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3194	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3195	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3196	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } } 	0
3197	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
3198	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
3199	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
3200	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3201	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3202	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
3203	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3204	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3205	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3206	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3207	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3208	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
3209	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3210	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
3211	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
3212	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
3213	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3214	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
3215	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3216	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
3217	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3218	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
3219	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
3220	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
3221	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 
3222	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3223	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3224	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	0
3225	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3226	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3227	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3228	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3229	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3230	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3231	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3232	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
3233	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3234	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3235	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { int h ; twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3236	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
3237	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3238	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3239	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3240	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3241	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3242	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3243	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
3244	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
3245	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { fscanf ( stdin , "%d" , & data ) ; } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3246	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3247	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
3248	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3249	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3250	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
3251	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3252	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3253	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3254	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3255	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3256	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
3257	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3258	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
3259	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3260	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3261	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
3262	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3263	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3264	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; goto source ; source : data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3265	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
3266	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
3267	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
3268	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3269	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
3270	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3271	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
3272	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3273	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3274	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;static void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = goodG2BSink ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
3275	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3276	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3277	static void FUN ( int data ) { if ( goodB2G1Static ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3278	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3279	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3280	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
3281	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3282	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
3283	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3284	void FUN ( ) { int i , j ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3285	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
3286	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
3287	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3288	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3289	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3290	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
3291	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
3292	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
3293	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
3294	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
3295	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
3296	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3297	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
3298	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3299	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
3300	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3301	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = badSink ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
3302	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
3303	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
3304	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3305	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3306	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void badSink ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 
3307	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
3308	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3309	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3310	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
3311	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
3312	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3313	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3314	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
3315	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
3316	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3317	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
3318	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3319	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
3320	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3321	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3322	static void FUN ( ) { int * data ; data = NULL ; while ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; break ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3323	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3324	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3325	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
3326	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3327	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
3328	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
3329	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3330	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
3331	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
3332	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3333	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
3334	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
3335	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
3336	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
3337	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3338	void FUN ( ) { int data ; data = - 1 ; data = RAND32 ( ) ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3339	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3340	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
3341	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3342	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
3343	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3344	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
3345	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
3346	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3347	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3348	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3349	void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { fscanf ( stdin , "%d" , & data ) ; } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3350	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3351	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3352	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3353	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3354	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
3355	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3356	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3357	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
3358	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3359	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
3360	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3361	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
3362	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
3363	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
3364	static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3365	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
3366	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3367	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	0
3368	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; data = NULL ; { int * data = * dataPtr1 ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
3369	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
3370	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } } 	1
3371	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3372	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3373	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3374	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
3375	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; goto source ; source : data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3376	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3377	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
3378	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
3379	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
3380	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
3381	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3382	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3383	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3384	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
3385	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3386	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3387	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; while ( 1 ) { data = dataBadBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3388	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; while ( 1 ) { data = dataBadBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3389	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3390	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3391	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3392	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
3393	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3394	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3395	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3396	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
3397	typedef long unsigned int size_t; static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3398	void FUN ( int * * dataPtr ) { int * data = * dataPtr ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3399	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 
3400	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
3401	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3402	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
3403	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { int i ; twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
3404	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3405	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
3406	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3407	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3408	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3409	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3410	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3411	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
3412	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3413	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3414	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
3415	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
3416	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
3417	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3418	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
3419	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3420	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3421	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3422	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataBadBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } } 	1
3423	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3424	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3425	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3426	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3427	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3428	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3429	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
3430	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3431	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3432	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3433	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
3434	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3435	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
3436	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3437	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3438	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3439	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
3440	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
3441	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3442	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3443	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3444	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3445	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3446	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3447	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3448	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
3449	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3450	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3451	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3452	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3453	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
3454	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3455	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
3456	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3457	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataBadBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	1
3458	void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3459	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3460	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
3461	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
3462	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
3463	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
3464	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
3465	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3466	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
3467	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3468	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3469	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
3470	static void FUN ( int data ) { if ( goodB2G1Static ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3471	static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3472	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3473	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3474	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3475	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
3476	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
3477	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3478	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
3479	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3480	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
3481	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
3482	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3483	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3484	void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : fscanf ( stdin , "%d" , & data ) ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	1
3485	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3486	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
3487	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
3488	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3489	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3490	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3491	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
3492	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	0
3493	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
3494	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3495	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	1
3496	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = RAND32 ( ) ; } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3497	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3498	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3499	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
3500	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
3501	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goodB2G2Static = 1 ; goodB2G2Sink ( data ) ; } 	0
3502	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 10 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3503	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
3504	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
3505	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3506	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
3507	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
3508	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3509	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3510	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3511	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3512	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
3513	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
3514	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3515	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
3516	void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; { int * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
3517	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3518	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3519	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
3520	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3521	void FUN ( ) { int i ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3522	typedef long unsigned int size_t; static void FUN ( void * data ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	0
3523	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
3524	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
3525	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
3526	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3527	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3528	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3529	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
3530	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3531	void FUN ( ) { int data ; data = - 1 ; data = RAND32 ( ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
3532	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
3533	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3534	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
3535	static void FUN ( ) { void * data ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; goodB2GSink ( data ) ; } 	0
3536	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
3537	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
3538	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
3539	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
3540	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
3541	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3542	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3543	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3544	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3545	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3546	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3547	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3548	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3549	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
3550	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
3551	void FUN ( ) { int data ; data = - 1 ; data = badSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
3552	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
3553	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
3554	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3555	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3556	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3557	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3558	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
3559	static void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3560	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3561	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
3562	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3563	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3564	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
3565	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3566	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
3567	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3568	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
3569	static void FUN ( ) { int data ; data = - 1 ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = 7 ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
3570	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3571	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
3572	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
3573	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3574	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3575	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
3576	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } } 	0
3577	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
3578	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3579	void FUN ( ) { int * data ; data = NULL ; switch ( 6 ) { case 6 : data = ( int * ) ALLOCA ( 10 ) ; break ; default : printLine ( STR ) ; break ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3580	typedef signed long long int64_t ; void FUN ( int64_t * dataArray [ ] ) { int64_t * data = dataArray [ 2 ] ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3581	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; { twoIntsStruct * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	1
3582	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3583	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
3584	static void FUN ( ) { int data ; data = - 1 ; goto source ; source : { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
3585	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3586	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
3587	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } } 	0
3588	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
3589	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3590	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3591	static void FUN ( ) { int data ; data = - 1 ; goto source ; source : data = 7 ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
3592	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3593	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3594	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
3595	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3596	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3597	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3598	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
3599	static void FUN ( ) { int * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3600	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
3601	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3602	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3603	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3604	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3605	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3606	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
3607	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
3608	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3609	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3610	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } } 	0
3611	static void FUN ( ) { int h , j ; int data ; data = - 1 ; for ( h = 0 ; h < 1 ; h ++ ) { data = 7 ; } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3612	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3613	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3614	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
3615	static void FUN ( ) { int data ; data = - 1 ; data = goodB2GSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
3616	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
3617	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
3618	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
3619	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 
3620	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3621	typedef signed long long int64_t ; void FUN ( ) { int i ; int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3622	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
3623	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3624	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3625	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3626	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
3627	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3628	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
3629	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
3630	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
3631	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
3632	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3633	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3634	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
3635	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
3636	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3637	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3638	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
3639	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } } 	1
3640	static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; data = 7 ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3641	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3642	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
3643	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3644	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3645	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
3646	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3647	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3648	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3649	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
3650	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
3651	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3652	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
3653	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
3654	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
3655	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3656	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3657	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
3658	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
3659	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3660	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3661	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3662	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3663	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3664	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3665	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3666	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3667	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3668	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3669	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; while ( 1 ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; break ; } while ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } break ; } } 	0
3670	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
3671	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3672	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
3673	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3674	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3675	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
3676	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
3677	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3678	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3679	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3680	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3681	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
3682	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
3683	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
3684	typedef long unsigned int size_t; void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3685	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3686	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3687	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3688	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
3689	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3690	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
3691	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
3692	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
3693	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 
3694	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3695	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
3696	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3697	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
3698	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
3699	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
3700	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3701	void FUN ( void * dataVoidPtr ) { int * * dataPtr = ( int * * ) dataVoidPtr ; int * data = ( * dataPtr ) ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3702	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3703	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = RAND32 ( ) ; break ; default : printLine ( STR ) ; break ; } switch ( 8 ) { case 7 : printLine ( STR ) ; break ; default : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
3704	static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodG2BSink ; data = - 1 ; data = 7 ; funcPtr ( data ) ; } 	0
3705	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3706	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3707	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3708	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3709	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
3710	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3711	void FUN ( ) { int data ; data = - 1 ; if ( true ) { fscanf ( stdin , "%d" , & data ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3712	static void FUN ( ) { int data ; data = - 1 ; data = RAND32 ( ) ; goodB2G1Static = 0 ; goodB2G1Sink ( data ) ; } 	0
3713	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
3714	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3715	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3716	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
3717	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3718	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
3719	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
3720	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
3721	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
3722	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3723	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3724	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
3725	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; { void * dataCopy = data ; void * data = dataCopy ; { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
3726	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3727	typedef long unsigned int size_t; void FUN ( int * * dataPtr ) { int * data = * dataPtr ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3728	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
3729	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3730	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
3731	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3732	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
3733	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3734	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; goto source ; source : { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
3735	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { goto sink ; sink : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } 	1
3736	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3737	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
3738	static void FUN ( ) { int * data ; data = NULL ; goto source ; source : data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3739	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3740	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
3741	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } } 	1
3742	static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { data = 7 ; } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3743	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = badSink ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
3744	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3745	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; { int64_t * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	0
3746	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3747	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3748	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3749	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
3750	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
3751	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3752	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3753	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
3754	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
3755	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
3756	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
3757	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * * dataPtr ) { twoIntsStruct * data = * dataPtr ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3758	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
3759	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3760	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
3761	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3762	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
3763	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3764	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3765	void FUN ( int * * dataPtr ) { int * data = * dataPtr ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3766	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3767	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
3768	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
3769	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
3770	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 ) ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3771	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3772	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
3773	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3774	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
3775	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
3776	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3777	void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { data = RAND32 ( ) ; } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3778	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
3779	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3780	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3781	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
3782	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 
3783	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3784	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3785	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
3786	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
3787	typedef long unsigned int size_t; static void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3788	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3789	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3790	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3791	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3792	void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = badSink ; data = - 1 ; data = 10 ; funcPtr ( data ) ; } 	1
3793	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3794	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
3795	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3796	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
3797	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3798	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; { int64_t * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	1
3799	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3800	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3801	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3802	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3803	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3804	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3805	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3806	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3807	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
3808	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3809	void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3810	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
3811	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
3812	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
3813	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3814	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3815	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3816	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3817	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
3818	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
3819	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3820	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3821	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3822	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
3823	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3824	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3825	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
3826	void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 10 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3827	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static int badSource ( int data ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } 
3828	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
3829	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3830	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3831	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3832	static void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3833	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3834	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3835	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3836	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
3837	static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; fscanf ( stdin , "%d" , & data ) ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3838	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3839	static void FUN ( ) { int data ; data = - 1 ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = 7 ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
3840	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3841	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
3842	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3843	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; goto source ; source : data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3844	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3845	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3846	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
3847	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
3848	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3849	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
3850	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
3851	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
3852	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( (rand() % 2) ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
3853	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3854	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3855	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
3856	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3857	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { twoIntsStruct * * dataPtr = ( twoIntsStruct * * ) dataVoidPtr ; twoIntsStruct * data = ( * dataPtr ) ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3858	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
3859	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
3860	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3861	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
3862	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
3863	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
3864	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3865	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3866	typedef long unsigned int size_t; static void badSink ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 
3867	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3868	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static int badSource ( int data ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } 
3869	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3870	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3871	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
3872	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
3873	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3874	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3875	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3876	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } } 	1
3877	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
3878	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
3879	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3880	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( (rand() % 2) ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
3881	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3882	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3883	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3884	static void FUN ( ) { int h , j ; int data ; data = - 1 ; for ( h = 0 ; h < 1 ; h ++ ) { data = 7 ; } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3885	static void FUN ( ) { int h ; int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3886	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3887	void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3888	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
3889	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
3890	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
3891	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3892	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
3893	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3894	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3895	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3896	static void badSink ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 
3897	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
3898	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3899	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
3900	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3901	void FUN ( ) { void * data ; void ( * funcPtr ) ( void * ) = badSink ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; funcPtr ( data ) ; } 	1
3902	void FUN ( ) { int i , j ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { data = 10 ; } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3903	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { while ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } break ; } } 	0
3904	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
3905	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
3906	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3907	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
3908	static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { data = 7 ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
3909	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3910	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3911	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
3912	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
3913	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3914	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; goto source ; source : { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
3915	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
3916	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3917	void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3918	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
3919	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3920	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
3921	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3922	void FUN ( ) { int data ; data = - 1 ; goto source ; source : { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
3923	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3924	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
3925	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
3926	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
3927	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3928	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3929	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3930	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
3931	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3932	typedef long unsigned int size_t; void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
3933	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3934	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodB2GSink ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } funcPtr ( data ) ; } 	0
3935	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3936	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
3937	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	1
3938	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
3939	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3940	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3941	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 
3942	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3943	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
3944	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3945	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
3946	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3947	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
3948	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
3949	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3950	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3951	void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3952	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3953	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
3954	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
3955	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
3956	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } } 	1
3957	void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3958	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3959	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
3960	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3961	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3962	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
3963	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
3964	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
3965	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
3966	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
3967	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
3968	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
3969	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
3970	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
3971	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
3972	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
3973	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
3974	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3975	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
3976	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	1
3977	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
3978	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
3979	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
3980	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
3981	void FUN ( int * dataArray [ ] ) { int * data = dataArray [ 2 ] ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
3982	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
3983	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
3984	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
3985	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
3986	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } } 	1
3987	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3988	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
3989	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
3990	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
3991	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
3992	static void badSink ( int data ) { if ( badStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 
3993	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3994	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
3995	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3996	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3997	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = RAND32 ( ) ; } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
3998	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
3999	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4000	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4001	static void FUN ( ) { int data ; data = - 1 ; data = goodB2GSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
4002	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4003	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
4004	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4005	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	0
4006	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4007	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4008	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
4009	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
4010	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4011	void FUN ( ) { int data ; data = - 1 ; goto source ; source : fscanf ( stdin , "%d" , & data ) ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
4012	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4013	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4014	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
4015	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4016	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
4017	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
4018	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
4019	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4020	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4021	typedef long unsigned int size_t; void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4022	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4023	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
4024	static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4025	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4026	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4027	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4028	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
4029	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
4030	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4031	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
4032	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4033	void FUN ( ) { int i ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
4034	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
4035	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
4036	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4037	typedef signed long long int64_t ; static void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4038	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4039	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
4040	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4041	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4042	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4043	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4044	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4045	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4046	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
4047	void FUN ( int dataArray [ ] ) { int data = dataArray [ 2 ] ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
4048	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
4049	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4050	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4051	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4052	void FUN ( ) { int i ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4053	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4054	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4055	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	1
4056	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
4057	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
4058	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
4059	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4060	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4061	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } } 	1
4062	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4063	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
4064	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4065	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; { twoIntsStruct * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } } 	1
4066	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4067	void FUN ( ) { int i ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4068	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4069	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
4070	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4071	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4072	typedef signed long long int64_t ; static void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4073	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
4074	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4075	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
4076	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4077	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4078	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
4079	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4080	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4081	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
4082	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4083	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4084	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4085	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4086	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4087	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
4088	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4089	void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 ) ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4090	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4091	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4092	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
4093	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4094	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4095	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4096	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
4097	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
4098	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4099	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
4100	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4101	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } } 	1
4102	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4103	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
4104	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4105	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4106	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4107	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
4108	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4109	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
4110	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
4111	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
4112	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
4113	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
4114	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4115	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4116	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
4117	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
4118	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4119	static void FUN ( ) { int data ; data = - 1 ; data = 10 ; goodB2G1Static = 0 ; goodB2G1Sink ( data ) ; } 	0
4120	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
4121	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4122	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; while ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; break ; } while ( 1 ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } break ; } } 	0
4123	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4124	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4125	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4126	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4127	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( (rand() % 2) ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
4128	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4129	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
4130	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4131	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4132	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4133	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; data = badSource ( data ) ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
4134	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4135	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
4136	void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4137	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4138	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4139	typedef long unsigned int size_t; static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4140	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
4141	static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4142	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4143	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { fscanf ( stdin , "%d" , & data ) ; } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4144	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
4145	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4146	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4147	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4148	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4149	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4150	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4151	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
4152	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4153	typedef long unsigned int size_t; static void FUN ( void * data ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	0
4154	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4155	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
4156	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4157	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4158	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4159	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
4160	typedef signed long long int64_t ; static void FUN ( ) { int h ; int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4161	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4162	void FUN ( ) { int i ; int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4163	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
4164	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4165	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4166	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4167	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4168	void FUN ( ) { int data ; data = - 1 ; fscanf ( stdin , "%d" , & data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
4169	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
4170	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4171	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4172	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4173	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
4174	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
4175	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4176	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } } 	1
4177	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
4178	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4179	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; data = goodB2GSource ( data ) ; { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } 	0
4180	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4181	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
4182	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
4183	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4184	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
4185	typedef long unsigned int size_t; void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
4186	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4187	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
4188	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
4189	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
4190	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
4191	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
4192	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4193	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
4194	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
4195	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4196	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
4197	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4198	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4199	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4200	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
4201	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
4202	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4203	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 
4204	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4205	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4206	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
4207	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
4208	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4209	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4210	static void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = goodG2BSink ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
4211	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
4212	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
4213	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4214	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataBadBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	1
4215	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4216	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4217	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4218	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4219	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
4220	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4221	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 10 ; } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4222	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4223	static void badSink ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 
4224	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { int h ; twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4225	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4226	void FUN ( int * dataArray [ ] ) { int * data = dataArray [ 2 ] ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4227	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4228	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4229	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } } 	0
4230	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4231	static void FUN ( ) { int * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4232	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
4233	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { switch ( 6 ) { case 6 : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } break ; default : printLine ( STR ) ; break ; } } 	1
4234	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4235	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int i , k ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( k = 0 ; k < 1 ; k ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4236	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4237	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4238	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4239	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4240	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4241	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4242	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
4243	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
4244	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4245	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
4246	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4247	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
4248	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4249	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
4250	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4251	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
4252	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4253	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4254	static void FUN ( ) { int data ; data = - 1 ; data = goodG2BSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
4255	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
4256	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4257	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
4258	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
4259	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4260	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
4261	void FUN ( ) { int * data ; data = NULL ; while ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; break ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4262	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
4263	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
4264	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4265	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
4266	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4267	static void FUN ( int data ) { if ( goodB2G2Static ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4268	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4269	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } } 	1
4270	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
4271	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4272	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4273	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
4274	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 
4275	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4276	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4277	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
4278	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4279	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } } 	0
4280	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4281	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4282	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
4283	void FUN ( ) { int * data ; data = NULL ; while ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; break ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4284	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4285	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4286	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } } 	1
4287	typedef signed long long int64_t ; static void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4288	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4289	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
4290	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4291	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
4292	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4293	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
4294	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4295	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	1
4296	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goodB2G1Static = 0 ; goodB2G1Sink ( data ) ; } 	0
4297	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4298	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4299	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4300	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4301	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
4302	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4303	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4304	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
4305	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
4306	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
4307	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4308	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
4309	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4310	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
4311	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4312	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
4313	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4314	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4315	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4316	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4317	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4318	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
4319	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
4320	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4321	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
4322	static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4323	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; { int64_t * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	0
4324	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
4325	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4326	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = badSink ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
4327	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4328	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
4329	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4330	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4331	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4332	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4333	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4334	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4335	void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4336	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4337	static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; data = RAND32 ( ) ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4338	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4339	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4340	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
4341	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4342	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4343	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4344	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
4345	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
4346	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
4347	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4348	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4349	typedef long unsigned int size_t; void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4350	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4351	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4352	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4353	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4354	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
4355	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4356	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
4357	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4358	static void FUN ( ) { int h ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4359	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4360	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
4361	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4362	void FUN ( ) { int i ; int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4363	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
4364	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
4365	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
4366	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
4367	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4368	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * dataArray [ ] ) { int64_t * data = dataArray [ 2 ] ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
4369	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
4370	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4371	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4372	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4373	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
4374	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4375	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4376	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4377	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4378	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4379	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4380	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
4381	static void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; { int * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
4382	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4383	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4384	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 
4385	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4386	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4387	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
4388	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4389	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
4390	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { goto sink ; sink : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } 	0
4391	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4392	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4393	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4394	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4395	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
4396	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4397	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4398	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	0
4399	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4400	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4401	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
4402	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } } 	0
4403	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4404	typedef signed long long int64_t ; static void FUN ( ) { int h ; int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4405	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
4406	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4407	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
4408	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4409	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
4410	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4411	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4412	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4413	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4414	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
4415	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
4416	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
4417	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	1
4418	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4419	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { switch ( 6 ) { case 6 : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } break ; default : printLine ( STR ) ; break ; } } 	1
4420	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4421	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
4422	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4423	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
4424	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4425	static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4426	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; switch ( 6 ) { case 6 : data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; break ; default : printLine ( STR ) ; break ; } switch ( 8 ) { case 7 : printLine ( STR ) ; break ; default : { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } break ; } } 	0
4427	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
4428	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
4429	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4430	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4431	typedef long unsigned int size_t; static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
4432	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
4433	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4434	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4435	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
4436	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
4437	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4438	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4439	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } } 	1
4440	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4441	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4442	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4443	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4444	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
4445	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4446	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4447	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4448	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4449	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
4450	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
4451	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4452	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4453	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } } 	1
4454	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
4455	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4456	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; { twoIntsStruct * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	1
4457	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
4458	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4459	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
4460	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4461	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * * dataPtr ) { twoIntsStruct * data = * dataPtr ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4462	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	0
4463	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
4464	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4465	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4466	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
4467	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4468	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4469	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; { int64_t * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	1
4470	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4471	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 10 ; } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4472	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
4473	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4474	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4475	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
4476	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
4477	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4478	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4479	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4480	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
4481	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4482	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4483	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4484	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
4485	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
4486	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4487	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4488	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
4489	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4490	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
4491	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } } 	1
4492	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4493	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { switch ( 6 ) { case 6 : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } break ; default : printLine ( STR ) ; break ; } } 	0
4494	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
4495	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4496	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4497	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
4498	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * dataArray [ ] ) { twoIntsStruct * data = dataArray [ 2 ] ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4499	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
4500	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4501	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4502	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; { int64_t * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } } 	1
4503	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4504	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4505	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
4506	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4507	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4508	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4509	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4510	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
4511	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4512	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
4513	void FUN ( ) { int i ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4514	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * data ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
4515	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4516	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
4517	static void badSink ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 
4518	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
4519	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4520	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4521	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4522	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4523	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = RAND32 ( ) ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
4524	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
4525	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } } 	1
4526	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4527	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4528	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4529	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4530	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
4531	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
4532	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
4533	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4534	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
4535	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
4536	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4537	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4538	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4539	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
4540	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4541	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
4542	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4543	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
4544	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4545	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4546	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
4547	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4548	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
4549	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
4550	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
4551	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int i , j ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
4552	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4553	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; { int * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } } 	1
4554	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4555	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
4556	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
4557	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4558	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4559	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4560	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4561	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } } 	0
4562	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4563	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4564	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4565	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4566	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4567	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4568	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4569	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
4570	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4571	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
4572	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4573	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
4574	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
4575	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
4576	typedef signed long long int64_t ; typedef long unsigned int size_t; static void badSink ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 
4577	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4578	void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = badSink ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
4579	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4580	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4581	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
4582	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
4583	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4584	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4585	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
4586	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4587	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
4588	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4589	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4590	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4591	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4592	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
4593	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4594	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
4595	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4596	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4597	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4598	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4599	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4600	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4601	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4602	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4603	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4604	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4605	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4606	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4607	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( (rand() % 2) ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
4608	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
4609	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4610	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
4611	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
4612	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4613	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4614	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
4615	static void FUN ( ) { int data ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } goodB2GSink ( data ) ; } 	0
4616	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4617	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4618	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; goto source ; source : data = ( int * ) ALLOCA ( 10 ) ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
4619	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
4620	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4621	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4622	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4623	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4624	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4625	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4626	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
4627	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
4628	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
4629	void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = badSink ; data = NULL ; data = ( int * ) ALLOCA ( 10 ) ; funcPtr ( data ) ; } 	1
4630	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
4631	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
4632	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4633	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4634	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4635	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4636	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4637	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
4638	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4639	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4640	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4641	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
4642	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
4643	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4644	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4645	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4646	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	1
4647	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4648	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
4649	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
4650	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
4651	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
4652	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
4653	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
4654	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
4655	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4656	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4657	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4658	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4659	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4660	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { twoIntsStruct * * dataPtr = ( twoIntsStruct * * ) dataVoidPtr ; twoIntsStruct * data = ( * dataPtr ) ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4661	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
4662	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4663	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
4664	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
4665	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4666	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
4667	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
4668	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4669	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4670	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4671	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
4672	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4673	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
4674	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4675	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4676	void FUN ( ) { int i , j ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { data = RAND32 ( ) ; } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
4677	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
4678	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
4679	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4680	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4681	void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = badSink ; data = - 1 ; fscanf ( stdin , "%d" , & data ) ; funcPtr ( data ) ; } 	1
4682	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4683	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
4684	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4685	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4686	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	1
4687	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
4688	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4689	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
4690	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4691	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
4692	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4693	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
4694	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4695	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4696	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4697	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4698	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
4699	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
4700	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { while ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } break ; } } 	1
4701	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4702	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4703	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
4704	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
4705	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4706	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4707	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4708	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4709	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4710	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4711	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void badSink ( void * data ) { if ( badStatic ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 
4712	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
4713	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4714	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } } 	0
4715	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4716	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
4717	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
4718	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4719	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4720	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4721	static void FUN ( int data ) { if ( goodB2G1Static ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4722	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4723	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
4724	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4725	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
4726	static void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = goodG2BSink ; data = NULL ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; funcPtr ( data ) ; } 	0
4727	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4728	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
4729	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
4730	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4731	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4732	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4733	void FUN ( ) { int data ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
4734	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
4735	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4736	static void FUN ( ) { void * data ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; goodB2G1Static = 0 ; goodB2G1Sink ( data ) ; } 	0
4737	void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = badSink ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } funcPtr ( data ) ; } 	1
4738	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
4739	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
4740	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
4741	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
4742	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4743	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4744	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( (rand() % 2) ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
4745	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
4746	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
4747	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
4748	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4749	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
4750	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
4751	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
4752	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
4753	void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; data = NULL ; { int * data = * dataPtr1 ; data = ( int * ) ALLOCA ( 10 ) ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
4754	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4755	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4756	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4757	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void badSink ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 
4758	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
4759	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4760	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
4761	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4762	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4763	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4764	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4765	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
4766	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4767	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4768	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4769	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
4770	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4771	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
4772	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4773	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4774	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
4775	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4776	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4777	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
4778	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
4779	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4780	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4781	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4782	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
4783	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4784	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4785	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4786	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4787	static void FUN ( int data ) { if ( goodG2BStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4788	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4789	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
4790	static void FUN ( ) { int data ; data = - 1 ; goto source ; source : data = 7 ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
4791	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4792	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
4793	typedef long unsigned int size_t; static void badSink ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 
4794	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4795	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
4796	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4797	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4798	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
4799	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
4800	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
4801	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
4802	typedef long unsigned int size_t; static void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4803	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4804	void FUN ( ) { int i ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4805	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
4806	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4807	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4808	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : fscanf ( stdin , "%d" , & data ) ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
4809	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4810	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4811	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
4812	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
4813	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
4814	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4815	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4816	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4817	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4818	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
4819	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4820	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
4821	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
4822	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4823	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4824	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4825	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
4826	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } } 	1
4827	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4828	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4829	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4830	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4831	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4832	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4833	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4834	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4835	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4836	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4837	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4838	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
4839	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4840	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4841	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4842	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
4843	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4844	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4845	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
4846	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4847	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
4848	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
4849	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4850	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4851	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4852	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4853	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
4854	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
4855	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4856	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
4857	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4858	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
4859	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
4860	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4861	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
4862	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4863	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = goodG2BSink ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
4864	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
4865	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
4866	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4867	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } } 	1
4868	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
4869	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
4870	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
4871	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = badSink ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
4872	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4873	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
4874	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4875	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4876	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
4877	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
4878	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
4879	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
4880	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4881	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4882	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4883	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
4884	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
4885	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4886	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4887	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
4888	void FUN ( ) { int i ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
4889	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4890	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4891	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4892	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4893	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4894	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4895	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4896	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( false ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
4897	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
4898	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
4899	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
4900	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
4901	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
4902	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
4903	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4904	typedef signed long long int64_t ; void FUN ( int64_t * dataArray [ ] ) { int64_t * data = dataArray [ 2 ] ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
4905	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4906	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
4907	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
4908	static void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4909	static void FUN ( ) { int data ; data = - 1 ; fscanf ( stdin , "%d" , & data ) ; goodB2G2Static = 1 ; goodB2G2Sink ( data ) ; } 	0
4910	void FUN ( ) { int * data ; data = NULL ; if ( (rand() % 2) ) { data = ( int * ) ALLOCA ( 10 ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4911	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
4912	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
4913	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
4914	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4915	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4916	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
4917	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
4918	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4919	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
4920	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { int64_t * * dataPtr = ( int64_t * * ) dataVoidPtr ; int64_t * data = ( * dataPtr ) ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
4921	void FUN ( void * dataVoidPtr ) { int * dataPtr = ( int * ) dataVoidPtr ; int data = ( * dataPtr ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
4922	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4923	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
4924	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
4925	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4926	typedef long unsigned int size_t; static void FUN ( ) { int h ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4927	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
4928	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
4929	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
4930	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
4931	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
4932	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
4933	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
4934	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
4935	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4936	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4937	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 
4938	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
4939	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4940	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
4941	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
4942	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4943	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
4944	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
4945	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
4946	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4947	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4948	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
4949	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
4950	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4951	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
4952	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4953	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
4954	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
4955	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
4956	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
4957	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4958	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4959	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
4960	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
4961	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
4962	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
4963	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4964	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
4965	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4966	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { while ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } break ; } } 	0
4967	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 
4968	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } } 	0
4969	void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
4970	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
4971	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
4972	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	1
4973	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4974	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4975	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
4976	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
4977	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4978	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
4979	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
4980	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
4981	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
4982	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
4983	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4984	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4985	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
4986	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4987	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
4988	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
4989	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
4990	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
4991	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
4992	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
4993	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
4994	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
4995	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
4996	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
4997	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
4998	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
4999	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5000	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
5001	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5002	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5003	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
5004	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5005	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5006	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5007	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
5008	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
5009	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5010	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
5011	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5012	void FUN ( int dataArray [ ] ) { int data = dataArray [ 2 ] ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
5013	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5014	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } } 	0
5015	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
5016	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5017	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } } 	1
5018	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5019	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5020	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5021	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
5022	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
5023	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
5024	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
5025	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
5026	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5027	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
5028	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
5029	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5030	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5031	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	0
5032	void FUN ( int dataArray [ ] ) { int data = dataArray [ 2 ] ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
5033	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5034	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5035	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5036	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5037	void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = badSink ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
5038	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
5039	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5040	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
5041	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5042	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5043	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
5044	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5045	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; goodG2BStatic = 1 ; goodG2BSink ( data ) ; } 	0
5046	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
5047	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5048	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
5049	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5050	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5051	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5052	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5053	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5054	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5055	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5056	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
5057	static void FUN ( ) { int * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5058	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
5059	void FUN ( ) { int i ; int * data ; data = NULL ; for ( i = 0 ; i < 1 ; i ++ ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5060	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5061	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5062	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5063	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
5064	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5065	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5066	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5067	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5068	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5069	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5070	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
5071	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5072	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
5073	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 10 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5074	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5075	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
5076	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5077	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5078	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5079	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5080	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5081	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = badSink ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
5082	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } break ; } } 	0
5083	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
5084	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
5085	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
5086	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5087	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5088	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5089	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5090	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } switch ( 8 ) { case 7 : printLine ( STR ) ; break ; default : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
5091	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
5092	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5093	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( (rand() % 2) ) { data = ( int * ) ALLOCA ( 10 ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
5094	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5095	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5096	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5097	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5098	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5099	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5100	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
5101	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
5102	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5103	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 10 ; } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5104	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5105	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5106	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
5107	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5108	void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = RAND32 ( ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
5109	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5110	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
5111	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5112	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5113	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
5114	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5115	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5116	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
5117	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5118	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
5119	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5120	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5121	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5122	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5123	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5124	void FUN ( ) { int data ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } badSink ( data ) ; } 	1
5125	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5126	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
5127	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
5128	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5129	static void FUN ( ) { int i , k ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { fscanf ( stdin , "%d" , & data ) ; } for ( k = 0 ; k < 1 ; k ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5130	static void FUN ( int data ) { if ( goodG2BStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5131	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
5132	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5133	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5134	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5135	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5136	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
5137	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5138	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 
5139	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5140	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5141	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
5142	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5143	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5144	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5145	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5146	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5147	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5148	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
5149	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5150	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
5151	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5152	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5153	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5154	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
5155	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5156	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5157	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5158	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5159	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
5160	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5161	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
5162	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
5163	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
5164	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5165	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5166	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodB2GSink ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } funcPtr ( data ) ; } 	0
5167	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
5168	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
5169	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5170	void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = badSink ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
5171	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
5172	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5173	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5174	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5175	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5176	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
5177	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5178	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
5179	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
5180	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
5181	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5182	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5183	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5184	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
5185	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5186	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
5187	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5188	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5189	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
5190	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * dataArray [ ] ) { int64_t * data = dataArray [ 2 ] ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
5191	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5192	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
5193	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
5194	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5195	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5196	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
5197	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5198	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
5199	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	1
5200	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5201	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
5202	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
5203	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
5204	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5205	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5206	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	1
5207	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
5208	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5209	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5210	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5211	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
5212	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5213	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5214	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5215	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5216	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5217	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5218	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5219	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5220	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5221	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5222	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5223	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5224	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
5225	typedef long unsigned int size_t; void FUN ( int * * dataPtr ) { int * data = * dataPtr ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
5226	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5227	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5228	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void badSink ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 
5229	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5230	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
5231	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5232	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
5233	static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5234	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
5235	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5236	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5237	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5238	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
5239	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
5240	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5241	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5242	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
5243	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
5244	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5245	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5246	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; goto source ; source : data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5247	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
5248	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	0
5249	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
5250	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5251	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5252	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5253	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5254	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
5255	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5256	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } break ; } } 	0
5257	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
5258	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5259	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5260	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5261	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
5262	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = RAND32 ( ) ; } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5263	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
5264	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 
5265	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5266	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
5267	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } } 	0
5268	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5269	static void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = goodG2BSink ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
5270	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
5271	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
5272	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5273	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5274	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5275	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5276	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5277	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 
5278	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5279	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5280	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
5281	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5282	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
5283	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
5284	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
5285	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5286	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5287	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
5288	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5289	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5290	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
5291	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
5292	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5293	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
5294	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5295	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5296	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
5297	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5298	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5299	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5300	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5301	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
5302	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
5303	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5304	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
5305	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
5306	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
5307	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5308	typedef signed long long int64_t ; void FUN ( ) { int i ; int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5309	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
5310	static void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = goodG2BSink ; data = NULL ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; funcPtr ( data ) ; } 	0
5311	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
5312	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5313	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
5314	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5315	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5316	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
5317	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
5318	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5319	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
5320	void FUN ( ) { int data ; data = - 1 ; data = 10 ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
5321	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5322	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5323	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
5324	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5325	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5326	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
5327	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5328	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
5329	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
5330	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5331	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5332	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5333	static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5334	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
5335	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5336	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5337	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5338	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5339	typedef signed long long int64_t ; void FUN ( int64_t * * dataPtr ) { int64_t * data = * dataPtr ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5340	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
5341	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5342	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
5343	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
5344	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5345	void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; data = 10 ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
5346	static void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5347	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
5348	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5349	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
5350	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5351	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5352	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
5353	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5354	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5355	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
5356	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5357	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5358	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5359	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5360	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5361	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5362	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5363	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5364	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5365	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
5366	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5367	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
5368	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
5369	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
5370	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5371	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5372	static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodB2GSink ; data = - 1 ; fscanf ( stdin , "%d" , & data ) ; funcPtr ( data ) ; } 	0
5373	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
5374	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
5375	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
5376	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
5377	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
5378	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5379	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5380	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5381	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5382	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5383	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5384	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5385	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5386	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5387	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5388	static void FUN ( ) { int h ; int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5389	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
5390	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5391	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5392	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
5393	static void FUN ( ) { int data ; data = - 1 ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = 7 ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
5394	void FUN ( ) { int i ; int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5395	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5396	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	0
5397	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5398	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5399	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5400	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5401	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5402	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
5403	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5404	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5405	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( (rand() % 2) ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( (rand() % 2) ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	1
5406	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
5407	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5408	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5409	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5410	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5411	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5412	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5413	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
5414	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5415	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5416	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5417	static void FUN ( ) { int data ; data = - 1 ; data = RAND32 ( ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
5418	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
5419	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
5420	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5421	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5422	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
5423	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5424	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5425	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
5426	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5427	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5428	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
5429	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5430	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
5431	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
5432	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
5433	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5434	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5435	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5436	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5437	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5438	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5439	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5440	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
5441	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5442	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
5443	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
5444	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
5445	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
5446	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5447	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5448	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { twoIntsStruct * * dataPtr = ( twoIntsStruct * * ) dataVoidPtr ; twoIntsStruct * data = ( * dataPtr ) ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
5449	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5450	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
5451	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5452	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5453	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5454	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
5455	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
5456	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5457	static void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
5458	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
5459	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5460	static void FUN ( int data ) { if ( goodB2G1Static ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5461	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5462	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5463	typedef signed long long int64_t ; void FUN ( int64_t * * dataPtr ) { int64_t * data = * dataPtr ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5464	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5465	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	1
5466	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
5467	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5468	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
5469	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
5470	static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { data = 7 ; } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5471	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
5472	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5473	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 
5474	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
5475	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
5476	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
5477	void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = RAND32 ( ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
5478	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 
5479	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5480	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5481	void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { fscanf ( stdin , "%d" , & data ) ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	1
5482	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
5483	typedef long unsigned int size_t; static void badSink ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 
5484	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
5485	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5486	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5487	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
5488	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
5489	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { while ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } break ; } } 	0
5490	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5491	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5492	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
5493	static void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5494	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
5495	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5496	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5497	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5498	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5499	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
5500	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5501	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5502	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5503	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
5504	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
5505	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5506	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5507	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5508	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	0
5509	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5510	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
5511	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
5512	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5513	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5514	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
5515	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5516	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
5517	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5518	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } } 	1
5519	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
5520	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
5521	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
5522	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 
5523	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
5524	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
5525	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
5526	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
5527	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
5528	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5529	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
5530	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5531	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
5532	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
5533	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5534	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
5535	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5536	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	1
5537	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5538	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = badSink ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
5539	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5540	typedef long unsigned int size_t; void FUN ( ) { int i ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5541	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5542	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
5543	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
5544	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
5545	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5546	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5547	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
5548	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
5549	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
5550	void FUN ( int * dataArray [ ] ) { int * data = dataArray [ 2 ] ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5551	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5552	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
5553	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5554	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
5555	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5556	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5557	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5558	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
5559	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
5560	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5561	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5562	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5563	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
5564	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
5565	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
5566	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5567	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
5568	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
5569	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5570	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5571	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; { twoIntsStruct * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	0
5572	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5573	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5574	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5575	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5576	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5577	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5578	typedef long unsigned int size_t; static void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
5579	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
5580	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5581	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
5582	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
5583	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
5584	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
5585	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5586	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = badSink ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } funcPtr ( data ) ; } 	1
5587	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
5588	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5589	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
5590	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
5591	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5592	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
5593	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { int j ; for ( j = 0 ; j < 1 ; j ++ ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
5594	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5595	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
5596	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5597	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5598	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
5599	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5600	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5601	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
5602	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
5603	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
5604	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
5605	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
5606	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5607	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
5608	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5609	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5610	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5611	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
5612	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
5613	static void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5614	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5615	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
5616	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
5617	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; { void * dataCopy = data ; void * data = dataCopy ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
5618	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
5619	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5620	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
5621	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
5622	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5623	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
5624	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5625	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } } 	0
5626	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int i , k ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( k = 0 ; k < 1 ; k ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5627	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5628	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
5629	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 
5630	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5631	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5632	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
5633	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5634	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5635	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
5636	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5637	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
5638	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } } 	1
5639	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5640	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } } 	0
5641	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5642	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5643	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5644	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
5645	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
5646	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
5647	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5648	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
5649	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5650	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
5651	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5652	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5653	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5654	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5655	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5656	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
5657	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5658	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5659	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5660	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5661	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
5662	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5663	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
5664	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
5665	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5666	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5667	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5668	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5669	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
5670	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * dataArray [ ] ) { twoIntsStruct * data = dataArray [ 2 ] ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
5671	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
5672	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
5673	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
5674	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5675	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
5676	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5677	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } } 	1
5678	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
5679	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5680	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5681	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
5682	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
5683	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
5684	static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; data = 7 ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5685	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5686	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5687	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; { int64_t * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } } 	1
5688	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5689	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5690	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } } 	1
5691	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5692	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5693	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
5694	void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = RAND32 ( ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
5695	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
5696	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
5697	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5698	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
5699	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
5700	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5701	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
5702	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5703	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
5704	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5705	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5706	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
5707	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5708	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5709	static void FUN ( ) { int h ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5710	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
5711	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5712	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
5713	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5714	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5715	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5716	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
5717	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5718	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
5719	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5720	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5721	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
5722	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
5723	static void FUN ( ) { int * data ; data = NULL ; while ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; break ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5724	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5725	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
5726	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataBadBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	1
5727	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5728	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5729	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { int h ; twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5730	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5731	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5732	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
5733	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5734	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5735	void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 ) ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
5736	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5737	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5738	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5739	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
5740	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
5741	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
5742	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goodB2G1Static = 0 ; goodB2G1Sink ( data ) ; } 	0
5743	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5744	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5745	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
5746	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
5747	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
5748	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
5749	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5750	static void FUN ( ) { int h ; int * data ; data = NULL ; for ( h = 0 ; h < 1 ; h ++ ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5751	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	1
5752	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
5753	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
5754	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5755	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5756	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5757	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5758	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5759	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5760	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } } 	0
5761	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5762	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5763	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5764	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
5765	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5766	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } 	0
5767	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5768	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5769	void FUN ( ) { int data ; data = - 1 ; goto source ; source : data = RAND32 ( ) ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
5770	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
5771	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
5772	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
5773	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
5774	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
5775	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5776	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5777	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
5778	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5779	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
5780	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5781	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5782	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5783	static void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = goodG2BSink ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
5784	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5785	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5786	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5787	static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { data = 7 ; } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5788	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
5789	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5790	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5791	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
5792	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5793	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5794	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
5795	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5796	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
5797	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5798	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5799	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
5800	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
5801	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
5802	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5803	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5804	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5805	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
5806	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
5807	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5808	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
5809	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5810	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5811	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5812	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5813	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5814	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5815	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5816	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5817	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5818	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5819	void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 10 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
5820	static void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5821	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
5822	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
5823	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
5824	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5825	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5826	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
5827	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5828	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 
5829	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5830	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5831	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5832	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5833	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
5834	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5835	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5836	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5837	static void FUN ( ) { int data ; data = - 1 ; data = goodG2BSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
5838	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
5839	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5840	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
5841	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5842	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5843	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5844	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
5845	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5846	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { int j ; for ( j = 0 ; j < 1 ; j ++ ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
5847	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5848	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5849	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5850	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
5851	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
5852	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5853	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5854	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
5855	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
5856	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
5857	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5858	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5859	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5860	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5861	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5862	static void FUN ( ) { int data ; data = - 1 ; fscanf ( stdin , "%d" , & data ) ; goodB2GSink ( data ) ; } 	0
5863	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5864	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
5865	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } } 	1
5866	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5867	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
5868	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
5869	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5870	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5871	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
5872	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5873	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5874	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
5875	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5876	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5877	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
5878	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
5879	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
5880	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
5881	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
5882	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
5883	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
5884	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5885	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5886	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
5887	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	1
5888	typedef signed long long int64_t ; static void badSink ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 
5889	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5890	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5891	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5892	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5893	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
5894	void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { data = RAND32 ( ) ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	1
5895	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
5896	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5897	static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5898	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5899	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; { twoIntsStruct * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	1
5900	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5901	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5902	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
5903	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5904	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5905	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5906	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5907	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5908	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
5909	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
5910	static void FUN ( ) { int data ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5911	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5912	static void FUN ( ) { int i , k ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } for ( k = 0 ; k < 1 ; k ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5913	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5914	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
5915	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
5916	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5917	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
5918	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5919	void FUN ( int dataArray [ ] ) { int data = dataArray [ 2 ] ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
5920	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
5921	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5922	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
5923	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
5924	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5925	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
5926	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
5927	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5928	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
5929	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
5930	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5931	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5932	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
5933	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
5934	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
5935	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5936	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5937	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
5938	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
5939	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
5940	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5941	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5942	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
5943	typedef long unsigned int size_t; void FUN ( ) { int i ; int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
5944	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5945	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
5946	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
5947	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5948	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5949	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5950	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5951	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
5952	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5953	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
5954	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
5955	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
5956	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
5957	typedef long unsigned int size_t; static void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
5958	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5959	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5960	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
5961	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
5962	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
5963	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5964	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5965	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
5966	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
5967	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
5968	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
5969	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
5970	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } } 	0
5971	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
5972	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
5973	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; while ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; break ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
5974	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
5975	static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { data = 10 ; } else { data = 10 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5976	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
5977	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
5978	void FUN ( ) { int data ; data = - 1 ; data = 10 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
5979	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5980	static void badSink ( int data ) { if ( badStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 
5981	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5982	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
5983	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
5984	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5985	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5986	void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { data = 10 ; } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
5987	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
5988	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
5989	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
5990	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5991	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
5992	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
5993	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
5994	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
5995	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5996	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
5997	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
5998	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
5999	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
6000	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6001	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
6002	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6003	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
6004	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } } 	1
6005	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
6006	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
6007	void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; { int * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
6008	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6009	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6010	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6011	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6012	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
6013	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
6014	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
6015	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; goto source ; source : data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6016	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
6017	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6018	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6019	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6020	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6021	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6022	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6023	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6024	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6025	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6026	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	0
6027	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6028	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6029	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataGoodBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
6030	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6031	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
6032	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6033	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
6034	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6035	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
6036	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
6037	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6038	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
6039	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6040	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6041	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6042	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6043	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
6044	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6045	static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodG2BSink ; data = - 1 ; data = 7 ; funcPtr ( data ) ; } 	0
6046	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6047	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6048	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6049	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6050	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6051	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
6052	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
6053	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6054	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6055	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
6056	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6057	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6058	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
6059	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
6060	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6061	typedef signed long long int64_t ; void FUN ( int64_t * * dataPtr ) { int64_t * data = * dataPtr ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6062	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6063	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
6064	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6065	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6066	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6067	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6068	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6069	typedef long unsigned int size_t; void FUN ( ) { int i ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6070	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6071	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
6072	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6073	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6074	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
6075	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } } 	1
6076	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6077	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
6078	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6079	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6080	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
6081	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6082	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = 7 ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
6083	static void FUN ( ) { int data ; data = - 1 ; data = RAND32 ( ) ; goodB2G2Static = 1 ; goodB2G2Sink ( data ) ; } 	0
6084	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6085	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
6086	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6087	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
6088	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6089	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6090	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
6091	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6092	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	0
6093	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
6094	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6095	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6096	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6097	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( false ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
6098	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6099	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6100	void FUN ( int * dataPtr ) { int data = * dataPtr ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
6101	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6102	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6103	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
6104	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
6105	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6106	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
6107	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
6108	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
6109	static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodG2BSink ; data = - 1 ; data = 7 ; funcPtr ( data ) ; } 	0
6110	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
6111	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6112	static void FUN ( ) { void * data ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; goodB2G2Static = 1 ; goodB2G2Sink ( data ) ; } 	0
6113	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6114	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { int i ; twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6115	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6116	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
6117	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6118	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
6119	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6120	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6121	static void FUN ( ) { int h ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6122	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6123	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } } 	0
6124	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
6125	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
6126	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
6127	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6128	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
6129	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6130	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } } 	0
6131	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6132	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6133	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
6134	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
6135	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6136	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = goodG2BSink ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
6137	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { int i , k ; void * data ; data = NULL ; for ( i = 0 ; i < 1 ; i ++ ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } for ( k = 0 ; k < 1 ; k ++ ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
6138	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
6139	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6140	static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { data = 7 ; } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6141	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6142	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6143	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
6144	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = badSink ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } funcPtr ( data ) ; } 	1
6145	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
6146	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
6147	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
6148	static void FUN ( ) { int data ; data = - 1 ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = 7 ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
6149	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6150	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6151	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6152	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	1
6153	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6154	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
6155	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6156	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6157	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
6158	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6159	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
6160	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6161	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6162	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
6163	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goodB2G2Static = 1 ; goodB2G2Sink ( data ) ; } 	0
6164	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6165	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
6166	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
6167	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6168	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6169	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
6170	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
6171	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
6172	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6173	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6174	typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { int * * dataPtr = ( int * * ) dataVoidPtr ; int * data = ( * dataPtr ) ; { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
6175	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6176	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6177	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6178	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6179	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6180	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6181	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6182	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } } 	0
6183	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6184	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6185	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6186	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	0
6187	void FUN ( int * dataPtr ) { int data = * dataPtr ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
6188	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6189	static void FUN ( int data ) { if ( goodB2G2Static ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6190	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
6191	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * dataArray [ ] ) { twoIntsStruct * data = dataArray [ 2 ] ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6192	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
6193	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
6194	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6195	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
6196	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
6197	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } } 	1
6198	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6199	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
6200	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = goodG2BSink ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
6201	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6202	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6203	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6204	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
6205	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6206	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
6207	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
6208	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 
6209	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6210	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
6211	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } } 	0
6212	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { int i ; twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6213	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6214	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
6215	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6216	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6217	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6218	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6219	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
6220	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6221	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6222	static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
6223	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
6224	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6225	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6226	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
6227	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6228	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
6229	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6230	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6231	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6232	static void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = goodG2BSink ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
6233	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
6234	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6235	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
6236	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6237	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
6238	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
6239	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 
6240	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
6241	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
6242	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6243	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6244	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
6245	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6246	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
6247	static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { data = RAND32 ( ) ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
6248	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6249	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
6250	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
6251	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6252	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6253	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6254	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6255	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
6256	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6257	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6258	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
6259	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
6260	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6261	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6262	static void FUN ( ) { int data ; data = - 1 ; data = goodG2BSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
6263	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6264	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
6265	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6266	static void badSink ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 
6267	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6268	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6269	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; switch ( 6 ) { case 6 : data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; break ; default : printLine ( STR ) ; break ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
6270	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6271	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6272	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6273	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
6274	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6275	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6276	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
6277	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
6278	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
6279	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6280	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6281	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6282	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
6283	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
6284	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
6285	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6286	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
6287	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6288	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
6289	static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6290	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
6291	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6292	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6293	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6294	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6295	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6296	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
6297	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
6298	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6299	static void FUN ( ) { int data ; data = - 1 ; if ( 0 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6300	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6301	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6302	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6303	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6304	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; goto source ; source : data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6305	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * data ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
6306	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
6307	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
6308	typedef long unsigned int size_t; void FUN ( ) { int i ; int * data ; data = NULL ; for ( i = 0 ; i < 1 ; i ++ ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
6309	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6310	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6311	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
6312	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6313	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
6314	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6315	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6316	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6317	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6318	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6319	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6320	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6321	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6322	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6323	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6324	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
6325	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6326	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
6327	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6328	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6329	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } 	0
6330	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6331	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
6332	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6333	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6334	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
6335	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6336	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
6337	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6338	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
6339	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
6340	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6341	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
6342	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6343	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6344	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
6345	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
6346	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6347	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
6348	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
6349	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6350	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6351	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
6352	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * dataArray [ ] ) { twoIntsStruct * data = dataArray [ 2 ] ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6353	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6354	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
6355	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6356	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
6357	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
6358	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6359	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6360	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
6361	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
6362	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6363	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6364	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
6365	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6366	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
6367	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6368	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6369	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
6370	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6371	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
6372	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } } 	0
6373	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6374	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6375	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6376	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6377	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6378	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
6379	typedef long unsigned int size_t; void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
6380	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6381	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
6382	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6383	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6384	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
6385	static void FUN ( int data ) { if ( goodG2BStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6386	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6387	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6388	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6389	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
6390	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
6391	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
6392	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6393	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6394	typedef long unsigned int size_t; void FUN ( int * dataArray [ ] ) { int * data = dataArray [ 2 ] ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
6395	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
6396	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6397	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
6398	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6399	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
6400	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
6401	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6402	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
6403	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6404	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
6405	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6406	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6407	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6408	typedef long unsigned int size_t; static void badSink ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 
6409	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
6410	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
6411	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6412	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 
6413	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
6414	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6415	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
6416	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
6417	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6418	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6419	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6420	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
6421	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
6422	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6423	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
6424	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } } 	1
6425	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6426	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6427	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6428	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
6429	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
6430	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
6431	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6432	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
6433	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
6434	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6435	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
6436	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
6437	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6438	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6439	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6440	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6441	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6442	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
6443	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6444	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6445	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6446	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6447	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
6448	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6449	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6450	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6451	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6452	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6453	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6454	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6455	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
6456	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6457	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6458	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6459	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } } 	1
6460	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6461	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6462	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6463	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6464	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6465	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
6466	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6467	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6468	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6469	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6470	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6471	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } } 	0
6472	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
6473	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
6474	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6475	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
6476	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } } 	0
6477	typedef long unsigned int size_t; void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6478	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6479	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
6480	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
6481	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6482	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6483	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6484	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6485	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
6486	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6487	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6488	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6489	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
6490	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6491	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6492	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } } 	1
6493	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6494	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6495	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6496	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6497	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6498	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6499	typedef long unsigned int size_t; static void FUN ( void * data ) { if ( goodG2BStatic ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
6500	void FUN ( ) { int data ; data = - 1 ; if ( true ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6501	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6502	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6503	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6504	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
6505	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6506	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
6507	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
6508	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 
6509	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6510	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
6511	static void FUN ( ) { int h , j ; int data ; data = - 1 ; for ( h = 0 ; h < 1 ; h ++ ) { data = 7 ; } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6512	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6513	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6514	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6515	static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6516	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6517	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
6518	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
6519	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6520	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6521	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6522	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
6523	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6524	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6525	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6526	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6527	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 10 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6528	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6529	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6530	static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; data = 7 ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6531	typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6532	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
6533	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6534	static void FUN ( ) { int * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6535	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6536	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
6537	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6538	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6539	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6540	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6541	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6542	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6543	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6544	static void FUN ( ) { int h , j ; int data ; data = - 1 ; for ( h = 0 ; h < 1 ; h ++ ) { data = 7 ; } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6545	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = badSink ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
6546	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6547	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; { int64_t * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	1
6548	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6549	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6550	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
6551	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
6552	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
6553	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6554	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goodB2GSink ( data ) ; } 	0
6555	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
6556	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6557	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6558	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
6559	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6560	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6561	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	0
6562	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6563	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6564	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
6565	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
6566	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6567	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6568	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
6569	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6570	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
6571	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6572	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6573	void FUN ( ) { int data ; data = - 1 ; if ( true ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6574	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6575	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
6576	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6577	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6578	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6579	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6580	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6581	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
6582	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
6583	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6584	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6585	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6586	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6587	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6588	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6589	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6590	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6591	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6592	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6593	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
6594	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6595	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6596	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
6597	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6598	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6599	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6600	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } } 	0
6601	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6602	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6603	static void FUN ( int data ) { if ( goodB2G1Static ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6604	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6605	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6606	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
6607	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6608	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
6609	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
6610	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6611	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6612	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
6613	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
6614	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
6615	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
6616	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6617	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6618	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6619	static void badSink ( int * data ) { { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 
6620	static void FUN ( ) { int data ; data = - 1 ; goto source ; source : data = RAND32 ( ) ; goto sink ; sink : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
6621	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6622	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
6623	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
6624	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6625	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6626	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
6627	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6628	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6629	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6630	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6631	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
6632	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6633	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
6634	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6635	static void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6636	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6637	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
6638	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int i ; int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
6639	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6640	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6641	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6642	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
6643	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
6644	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
6645	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6646	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	1
6647	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
6648	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6649	void FUN ( ) { int i ; int * data ; data = NULL ; for ( i = 0 ; i < 1 ; i ++ ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6650	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6651	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
6652	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
6653	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
6654	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
6655	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6656	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6657	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6658	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6659	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6660	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6661	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6662	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6663	void FUN ( void * dataVoidPtr ) { int * dataPtr = ( int * ) dataVoidPtr ; int data = ( * dataPtr ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
6664	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
6665	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
6666	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6667	static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { data = 7 ; } else { data = 7 ; } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6668	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6669	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
6670	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
6671	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6672	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6673	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6674	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6675	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
6676	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
6677	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6678	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
6679	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
6680	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6681	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } 	1
6682	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
6683	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
6684	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataGoodBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
6685	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6686	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6687	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataGoodBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } } 	0
6688	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
6689	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 
6690	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6691	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6692	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6693	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6694	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
6695	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; goto source ; source : data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
6696	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6697	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6698	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( true ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
6699	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6700	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6701	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6702	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
6703	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { int h ; twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6704	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
6705	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
6706	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	0
6707	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6708	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6709	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
6710	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6711	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
6712	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6713	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
6714	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6715	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6716	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
6717	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
6718	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; goodG2BStatic = 1 ; goodG2BSink ( data ) ; } 	0
6719	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6720	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6721	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6722	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
6723	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6724	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
6725	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
6726	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } } 	0
6727	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
6728	static void FUN ( ) { int data ; data = - 1 ; data = goodG2BSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
6729	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6730	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6731	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
6732	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
6733	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6734	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6735	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6736	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6737	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6738	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6739	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6740	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
6741	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6742	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
6743	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6744	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
6745	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6746	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6747	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6748	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
6749	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
6750	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
6751	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; void * * dataPtr1 = & data ; void * * dataPtr2 = & data ; data = NULL ; { void * data = * dataPtr1 ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; * dataPtr1 = data ; } { void * data = * dataPtr2 ; { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
6752	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
6753	void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6754	static void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6755	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6756	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6757	static void FUN ( ) { int * data ; data = NULL ; if ( (rand() % 2) ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6758	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6759	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6760	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
6761	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6762	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6763	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
6764	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
6765	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
6766	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6767	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6768	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6769	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6770	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6771	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
6772	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6773	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6774	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6775	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6776	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
6777	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
6778	static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { data = 7 ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
6779	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6780	static void FUN ( ) { int i , k ; int data ; data = - 1 ; for ( i = 0 ; i < 1 ; i ++ ) { data = RAND32 ( ) ; } for ( k = 0 ; k < 1 ; k ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6781	void FUN ( void * dataVoidPtr ) { int * * dataPtr = ( int * * ) dataVoidPtr ; int * data = ( * dataPtr ) ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6782	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6783	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6784	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
6785	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
6786	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6787	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6788	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6789	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
6790	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6791	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6792	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6793	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
6794	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
6795	void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6796	static void FUN ( ) { int data ; data = - 1 ; data = goodG2BSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
6797	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6798	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6799	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6800	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6801	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
6802	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6803	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6804	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6805	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
6806	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6807	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6808	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6809	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6810	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6811	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6812	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
6813	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6814	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6815	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
6816	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6817	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6818	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
6819	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6820	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
6821	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6822	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; break ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6823	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6824	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6825	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6826	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
6827	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6828	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
6829	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
6830	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
6831	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6832	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
6833	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6834	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
6835	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6836	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6837	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	0
6838	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { goto sink ; sink : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } 	0
6839	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6840	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
6841	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
6842	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
6843	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
6844	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6845	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6846	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; goto source ; source : data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6847	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
6848	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6849	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
6850	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
6851	void FUN ( ) { int * data ; data = NULL ; if ( (rand() % 2) ) { data = ( int * ) ALLOCA ( 10 ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6852	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 
6853	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
6854	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
6855	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
6856	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
6857	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6858	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6859	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
6860	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
6861	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6862	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
6863	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
6864	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } } 	0
6865	static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6866	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6867	static void FUN ( ) { int * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6868	void FUN ( ) { int data ; data = - 1 ; data = badSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
6869	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
6870	void FUN ( int * dataPtr ) { int data = * dataPtr ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
6871	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
6872	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
6873	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
6874	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
6875	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6876	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
6877	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6878	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6879	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6880	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } } 	0
6881	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6882	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
6883	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6884	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6885	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6886	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
6887	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6888	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 
6889	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6890	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } } 	0
6891	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; goto source ; source : data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
6892	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
6893	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
6894	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
6895	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6896	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6897	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
6898	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6899	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } } 	0
6900	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
6901	static void FUN ( ) { int h ; char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6902	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6903	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
6904	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6905	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6906	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
6907	typedef long unsigned int size_t; static void FUN ( ) { void * data ; void * * dataPtr1 = & data ; void * * dataPtr2 = & data ; data = NULL ; { void * data = * dataPtr1 ; data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; * dataPtr1 = data ; } { void * data = * dataPtr2 ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
6908	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; { twoIntsStruct * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	0
6909	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
6910	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6911	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
6912	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
6913	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
6914	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6915	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
6916	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6917	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
6918	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6919	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
6920	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6921	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6922	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int h ; int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
6923	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
6924	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6925	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6926	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
6927	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6928	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 0 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
6929	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
6930	static void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6931	static void FUN ( ) { int h , j ; int data ; data = - 1 ; for ( h = 0 ; h < 1 ; h ++ ) { data = 7 ; } for ( j = 0 ; j < 1 ; j ++ ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6932	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } } 	0
6933	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
6934	static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6935	typedef long unsigned int size_t; void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
6936	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6937	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
6938	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
6939	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6940	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6941	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
6942	void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 ) ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	1
6943	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6944	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
6945	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6946	void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { data = 10 ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	1
6947	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
6948	void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = badSink ; data = NULL ; data = ( int * ) ALLOCA ( 10 ) ; funcPtr ( data ) ; } 	1
6949	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
6950	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
6951	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
6952	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
6953	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6954	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6955	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6956	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6957	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6958	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6959	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
6960	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6961	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
6962	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6963	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
6964	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6965	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; { void * dataCopy = data ; void * data = dataCopy ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
6966	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6967	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
6968	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6969	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
6970	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
6971	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
6972	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
6973	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6974	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
6975	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
6976	typedef long unsigned int size_t; void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; { int * data = * dataPtr1 ; data = dataBadBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } } 	1
6977	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
6978	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
6979	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
6980	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
6981	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 
6982	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6983	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
6984	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6985	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
6986	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
6987	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
6988	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
6989	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
6990	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
6991	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { while ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } break ; } } 	1
6992	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
6993	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
6994	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6995	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
6996	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
6997	static void FUN ( ) { int data ; data = - 1 ; data = goodB2GSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
6998	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } } 	0
6999	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7000	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
7001	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7002	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
7003	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
7004	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
7005	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
7006	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
7007	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7008	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7009	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7010	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7011	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7012	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7013	static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7014	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
7015	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
7016	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7017	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7018	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7019	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
7020	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
7021	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7022	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
7023	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
7024	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7025	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
7026	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
7027	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7028	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
7029	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7030	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
7031	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7032	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7033	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7034	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7035	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7036	void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7037	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7038	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
7039	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7040	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
7041	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7042	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } } 	1
7043	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
7044	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7045	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7046	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7047	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7048	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7049	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
7050	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7051	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
7052	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
7053	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
7054	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( (rand() % 2) ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
7055	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
7056	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7057	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7058	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7059	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
7060	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
7061	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
7062	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7063	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
7064	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
7065	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7066	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7067	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7068	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
7069	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
7070	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
7071	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7072	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 
7073	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
7074	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
7075	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7076	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7077	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
7078	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7079	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
7080	void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; fscanf ( stdin , "%d" , & data ) ; * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
7081	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7082	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } } 	0
7083	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
7084	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7085	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7086	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7087	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7088	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7089	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
7090	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
7091	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7092	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
7093	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7094	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7095	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7096	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7097	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7098	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
7099	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7100	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } } 	0
7101	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7102	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7103	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } } 	1
7104	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7105	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7106	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7107	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7108	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7109	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7110	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7111	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7112	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7113	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
7114	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7115	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7116	typedef signed long long int64_t ; static void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7117	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7118	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
7119	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7120	static void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; { int * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
7121	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
7122	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7123	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7124	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7125	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
7126	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
7127	typedef long unsigned int size_t; void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7128	void FUN ( int * * dataPtr ) { int * data = * dataPtr ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7129	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
7130	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
7131	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * * dataPtr ) { twoIntsStruct * data = * dataPtr ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7132	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7133	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
7134	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7135	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7136	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7137	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
7138	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; int * dataPtr1 = & data ; int * dataPtr2 = & data ; data = - 1 ; { int data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { int data = * dataPtr2 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
7139	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7140	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
7141	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
7142	static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodG2BSink ; data = - 1 ; data = 7 ; funcPtr ( data ) ; } 	0
7143	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7144	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7145	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7146	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7147	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7148	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	1
7149	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7150	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } } 	1
7151	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
7152	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7153	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
7154	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
7155	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7156	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7157	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7158	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
7159	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7160	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7161	static void FUN ( ) { int * data ; data = NULL ; switch ( 6 ) { case 6 : data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; break ; default : printLine ( STR ) ; break ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7162	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7163	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
7164	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7165	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
7166	typedef signed long long int64_t ; void FUN ( int64_t * * dataPtr ) { int64_t * data = * dataPtr ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7167	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
7168	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7169	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7170	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
7171	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
7172	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7173	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7174	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
7175	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7176	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
7177	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 
7178	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7179	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
7180	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 
7181	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
7182	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
7183	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7184	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
7185	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7186	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7187	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7188	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ 100 ] ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
7189	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7190	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
7191	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7192	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
7193	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
7194	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
7195	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7196	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7197	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
7198	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7199	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7200	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7201	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
7202	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7203	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7204	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7205	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
7206	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7207	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7208	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
7209	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7210	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7211	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7212	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
7213	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } } 	0
7214	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7215	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	0
7216	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7217	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7218	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7219	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7220	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7221	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
7222	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7223	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7224	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7225	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7226	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7227	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7228	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7229	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7230	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
7231	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7232	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7233	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7234	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7235	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7236	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
7237	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
7238	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7239	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7240	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7241	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
7242	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7243	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7244	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7245	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7246	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
7247	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	1
7248	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7249	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } } 	1
7250	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7251	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; funcPtr ( data ) ; } 	0
7252	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
7253	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7254	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7255	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7256	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7257	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
7258	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataGoodBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	0
7259	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7260	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7261	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7262	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7263	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7264	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7265	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7266	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7267	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7268	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7269	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
7270	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7271	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
7272	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7273	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7274	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7275	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7276	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7277	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
7278	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
7279	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	0
7280	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
7281	void FUN ( ) { int data ; data = - 1 ; fscanf ( stdin , "%d" , & data ) ; badStatic = 1 ; badSink ( data ) ; } 	1
7282	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7283	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7284	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7285	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7286	typedef long unsigned int size_t; void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7287	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
7288	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7289	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
7290	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7291	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( (rand() % 2) ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
7292	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7293	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
7294	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
7295	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
7296	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7297	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7298	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	1
7299	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7300	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7301	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7302	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7303	static void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7304	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
7305	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
7306	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7307	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7308	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7309	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void badSink ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 
7310	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7311	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7312	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7313	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7314	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } } 	1
7315	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
7316	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } } 	1
7317	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7318	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataBadBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } } 	1
7319	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
7320	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7321	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; break ; } switch ( 7 ) { case 7 : { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } break ; default : printLine ( STR ) ; break ; } } 	0
7322	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7323	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
7324	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7325	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7326	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
7327	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7328	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7329	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7330	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7331	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
7332	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
7333	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7334	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
7335	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
7336	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7337	static void FUN ( ) { int data ; data = - 1 ; data = RAND32 ( ) ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7338	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } } 	0
7339	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
7340	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; switch ( 6 ) { case 6 : data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } break ; default : printLine ( STR ) ; break ; } } 	1
7341	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	1
7342	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
7343	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
7344	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7345	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
7346	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7347	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
7348	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7349	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7350	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;static void FUN ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = goodG2BSink ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
7351	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7352	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7353	static void * FUN ( void * data ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; return data ; } 	0
7354	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7355	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7356	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
7357	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
7358	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7359	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7360	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
7361	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7362	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7363	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7364	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
7365	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
7366	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7367	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
7368	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { twoIntsStruct * * dataPtr = ( twoIntsStruct * * ) dataVoidPtr ; twoIntsStruct * data = ( * dataPtr ) ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7369	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7370	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7371	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7372	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7373	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
7374	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
7375	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	0
7376	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
7377	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7378	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { int i , j ; void * data ; data = NULL ; for ( i = 0 ; i < 1 ; i ++ ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } for ( j = 0 ; j < 1 ; j ++ ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
7379	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 0 ) { printLine ( STR ) ; } else { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
7380	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
7381	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7382	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7383	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
7384	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * * dataPtr1 = & data ; twoIntsStruct * * dataPtr2 = & data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; { twoIntsStruct * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	0
7385	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7386	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
7387	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7388	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
7389	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
7390	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
7391	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
7392	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7393	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
7394	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
7395	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7396	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
7397	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
7398	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7399	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
7400	typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
7401	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
7402	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7403	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7404	void FUN ( void * dataVoidPtr ) { int * * dataPtr = ( int * * ) dataVoidPtr ; int * data = ( * dataPtr ) ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7405	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
7406	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
7407	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7408	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7409	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
7410	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7411	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7412	void FUN ( ) { int data ; data = - 1 ; fscanf ( stdin , "%d" , & data ) ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
7413	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 
7414	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7415	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7416	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7417	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7418	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7419	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
7420	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
7421	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7422	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7423	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7424	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7425	static void FUN ( ) { int h ; int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7426	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7427	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7428	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7429	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * * dataPtr1 = & data ; int64_t * * dataPtr2 = & data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; { int64_t * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int64_t * data = * dataPtr2 ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	0
7430	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7431	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7432	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; while ( 1 ) { data = dataBadBuffer ; break ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7433	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7434	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
7435	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7436	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( true ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
7437	typedef long unsigned int size_t; static void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
7438	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
7439	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
7440	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7441	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7442	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7443	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7444	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	0
7445	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
7446	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7447	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
7448	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7449	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7450	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7451	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7452	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataBadBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } } 	1
7453	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
7454	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7455	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( false ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
7456	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7457	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7458	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7459	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
7460	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7461	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7462	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
7463	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7464	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
7465	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7466	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } } 	0
7467	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7468	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7469	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7470	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7471	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
7472	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
7473	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
7474	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7475	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7476	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7477	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7478	typedef long unsigned int size_t; static void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
7479	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7480	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } 	0
7481	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; break ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
7482	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
7483	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
7484	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
7485	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
7486	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } } 	0
7487	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7488	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7489	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7490	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7491	typedef long unsigned int size_t; void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7492	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
7493	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7494	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7495	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7496	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7497	static int badSource ( int data ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } return data ; } 
7498	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7499	static void FUN ( ) { int h ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7500	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
7501	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
7502	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7503	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7504	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7505	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
7506	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7507	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7508	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
7509	typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7510	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
7511	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
7512	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7513	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
7514	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7515	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7516	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7517	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7518	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
7519	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7520	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
7521	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7522	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7523	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7524	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
7525	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
7526	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7527	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
7528	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
7529	typedef long unsigned int size_t; void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
7530	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
7531	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
7532	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7533	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7534	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7535	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	1
7536	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7537	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
7538	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7539	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 
7540	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7541	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( true ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( false ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7542	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
7543	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
7544	typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; data = goodG2BSource ( data ) ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * 1 ) ; ( void ) strcpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	0
7545	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
7546	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7547	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } } 	1
7548	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
7549	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7550	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7551	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
7552	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7553	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7554	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7555	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
7556	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7557	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
7558	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7559	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 10 ; } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7560	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7561	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
7562	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
7563	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
7564	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7565	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7566	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7567	static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = 7 ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
7568	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7569	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7570	static void FUN ( ) { int data ; data = - 1 ; if ( false ) { printLine ( STR ) ; } else { data = 7 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7571	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
7572	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
7573	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7574	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
7575	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
7576	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
7577	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7578	typedef long unsigned int size_t; void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7579	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7580	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
7581	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
7582	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7583	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7584	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
7585	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7586	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7587	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } } 	0
7588	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
7589	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
7590	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
7591	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
7592	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7593	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 0 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
7594	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
7595	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7596	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7597	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7598	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
7599	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
7600	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
7601	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
7602	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7603	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( twoIntsStruct * data ) { { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7604	static void FUN ( ) { int data ; data = - 1 ; fscanf ( stdin , "%d" , & data ) ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7605	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7606	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7607	typedef long unsigned int size_t; void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
7608	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
7609	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7610	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printWLine ( ( wchar_t * ) dest ) ; } } } 	0
7611	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
7612	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7613	typedef long unsigned int size_t; static void FUN ( ) { int h ; int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
7614	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7615	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7616	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; goodG2BStatic = 1 ; goodG2BSink ( data ) ; } 	0
7617	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
7618	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7619	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7620	static char * badSource ( char * data ) { if ( badStatic ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } return data ; } 
7621	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
7622	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7623	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7624	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
7625	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7626	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7627	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7628	void FUN ( char * * dataPtr ) { char * data = * dataPtr ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7629	void FUN ( int * dataPtr ) { int data = * dataPtr ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
7630	static void FUN ( int data ) { if ( goodB2G2Static ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7631	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7632	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
7633	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } } 	0
7634	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7635	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7636	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	1
7637	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; data = dataGoodBuffer ; { twoIntsStruct * dataCopy = data ; twoIntsStruct * data = dataCopy ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } } 	0
7638	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7639	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
7640	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
7641	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
7642	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7643	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7644	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7645	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7646	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7647	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7648	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7649	static void FUN ( ) { int * data ; data = NULL ; goto source ; source : data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7650	void FUN ( void * dataVoidPtr ) { int * * dataPtr = ( int * * ) dataVoidPtr ; int * data = ( * dataPtr ) ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7651	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7652	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
7653	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7654	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
7655	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7656	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
7657	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
7658	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
7659	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
7660	void FUN ( int * * dataPtr ) { int * data = * dataPtr ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7661	typedef signed long long int64_t ; void FUN ( int64_t * dataArray [ ] ) { int64_t * data = dataArray [ 2 ] ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7662	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
7663	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7664	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7665	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7666	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
7667	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
7668	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7669	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7670	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7671	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
7672	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7673	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7674	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7675	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7676	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
7677	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
7678	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
7679	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
7680	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7681	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7682	typedef signed long long int64_t ; static void badSink ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 
7683	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( (rand() % 2) ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
7684	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } } 	1
7685	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
7686	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
7687	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7688	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7689	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
7690	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
7691	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
7692	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7693	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7694	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7695	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
7696	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7697	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7698	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7699	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7700	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
7701	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7702	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7703	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7704	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7705	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7706	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7707	void FUN ( void * dataVoidPtr ) { int * dataPtr = ( int * ) dataVoidPtr ; int data = ( * dataPtr ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
7708	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
7709	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7710	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7711	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static int FUN ( int data ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } 	0
7712	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7713	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7714	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7715	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = goodG2BSink ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
7716	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
7717	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7718	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
7719	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
7720	static void FUN ( ) { int data ; data = - 1 ; data = goodG2BSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
7721	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7722	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
7723	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
7724	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { while ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } break ; } } 	0
7725	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
7726	typedef long unsigned int size_t; void FUN ( char * data ) { { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7727	static void FUN ( ) { int * data ; data = NULL ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7728	static void FUN ( ) { int data ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } goodB2G2Static = 1 ; goodB2G2Sink ( data ) ; } 	0
7729	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7730	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7731	void FUN ( int * dataArray [ ] ) { int * data = dataArray [ 2 ] ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7732	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
7733	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7734	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7735	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7736	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
7737	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
7738	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
7739	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
7740	static void FUN ( ) { int data ; data = - 1 ; { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
7741	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7742	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
7743	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
7744	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7745	void FUN ( void * dataVoidPtr ) { int * dataPtr = ( int * ) dataVoidPtr ; int data = ( * dataPtr ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
7746	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; while ( 1 ) { data = dataBadBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7747	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
7748	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7749	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( false ) { printLine ( STR ) ; } else { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
7750	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
7751	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
7752	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
7753	static void FUN ( ) { int data ; data = - 1 ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = 7 ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
7754	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7755	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7756	void FUN ( ) { int i ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
7757	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
7758	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7759	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7760	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7761	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7762	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
7763	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7764	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7765	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
7766	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void badSink ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 
7767	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7768	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
7769	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
7770	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
7771	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7772	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7773	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7774	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
7775	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7776	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
7777	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
7778	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
7779	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; goto source ; source : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7780	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7781	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
7782	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
7783	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
7784	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7785	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
7786	static void badSink ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 
7787	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7788	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7789	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
7790	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
7791	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7792	static void FUN ( ) { void * data ; data = NULL ; data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; goodG2BStatic = 1 ; goodG2BSink ( data ) ; } 	0
7793	static void badSink ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 
7794	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7795	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
7796	static void FUN ( ) { int data ; data = - 1 ; if ( (rand() % 2) ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } else { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( (rand() % 2) ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7797	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7798	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 != 5 ) { printLine ( STR ) ; } else { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
7799	typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { int * * dataPtr = ( int * * ) dataVoidPtr ; int * data = ( * dataPtr ) ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
7800	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7801	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
7802	static void badSink ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 
7803	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
7804	void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : data = 10 ; break ; default : printLine ( STR ) ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	1
7805	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7806	static char * FUN ( char * data ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; return data ; } 	0
7807	void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7808	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
7809	static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7810	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
7811	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7812	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
7813	static void FUN ( ) { int * data ; void ( * funcPtr ) ( int * ) = goodG2BSink ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataGoodBuffer ; funcPtr ( data ) ; } 	0
7814	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7815	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
7816	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7817	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7818	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
7819	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7820	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7821	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { goto sink ; sink : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } 	0
7822	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7823	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 
7824	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; { char * data = * dataPtr1 ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
7825	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7826	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7827	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
7828	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7829	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
7830	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
7831	typedef long unsigned int size_t; void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
7832	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { switch ( 6 ) { case 6 : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } break ; default : printLine ( STR ) ; break ; } } 	1
7833	static char * FUN ( char * data ) { if ( goodG2B1Static ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
7834	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
7835	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7836	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
7837	typedef long unsigned int size_t; void FUN ( char * data ) { { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7838	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7839	typedef long unsigned int size_t; static void badSink ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 
7840	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
7841	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
7842	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
7843	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7844	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
7845	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
7846	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7847	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
7848	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( (rand() % 2) ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7849	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataGoodBuffer ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7850	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7851	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7852	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7853	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7854	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7855	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7856	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
7857	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7858	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
7859	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7860	static void FUN ( ) { int h ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7861	static void FUN ( ) { int data ; data = - 1 ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = 7 ; break ; } switch ( 7 ) { case 7 : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; default : printLine ( STR ) ; break ; } } 	0
7862	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	0
7863	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
7864	static void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } } 	0
7865	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7866	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
7867	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7868	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
7869	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
7870	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7871	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7872	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7873	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
7874	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { fscanf ( stdin , "%d" , & data ) ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7875	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	0
7876	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7877	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7878	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
7879	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
7880	static void FUN ( ) { int data ; void ( * funcPtr ) ( int ) = goodB2GSink ; data = - 1 ; data = 10 ; funcPtr ( data ) ; } 	0
7881	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	1
7882	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7883	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
7884	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7885	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
7886	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7887	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7888	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
7889	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7890	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
7891	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7892	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
7893	void FUN ( int dataArray [ ] ) { int data = dataArray [ 2 ] ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
7894	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7895	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
7896	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7897	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
7898	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7899	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7900	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; for ( i = 0 ; i < 1 ; i ++ ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
7901	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7902	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7903	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7904	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
7905	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7906	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } } 	0
7907	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
7908	void FUN ( ) { int * data ; data = NULL ; goto source ; source : data = ( int * ) ALLOCA ( 10 ) ; { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7909	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7910	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
7911	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7912	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
7913	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
7914	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7915	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7916	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	0
7917	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
7918	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; break ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7919	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7920	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7921	typedef long unsigned int size_t; static void FUN ( ) { int h ; int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
7922	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
7923	void FUN ( void * dataVoidPtr ) { int * * dataPtr = ( int * * ) dataVoidPtr ; int * data = ( * dataPtr ) ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7924	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBadBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	1
7925	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
7926	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
7927	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7928	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7929	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
7930	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7931	void FUN ( ) { int data ; data = - 1 ; data = badSource ( data ) ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
7932	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7933	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
7934	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 
7935	static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { data = 7 ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
7936	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7937	typedef signed long long int64_t ; static void FUN ( ) { int h ; int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7938	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7939	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
7940	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
7941	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } } 	1
7942	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; while ( 1 ) { data = dataBadBuffer ; break ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
7943	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
7944	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
7945	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { data = RAND32 ( ) ; } if ( 5 != 5 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7946	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	0
7947	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7948	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7949	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7950	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
7951	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
7952	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * data ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
7953	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
7954	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; goto source ; source : data = dataBadBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
7955	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7956	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	1
7957	void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7958	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
7959	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
7960	char * FUN ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 	1
7961	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; { wchar_t * data = * dataPtr1 ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } } 	1
7962	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7963	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; { int * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } } 	0
7964	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
7965	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
7966	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
7967	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
7968	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7969	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( 1 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 1 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
7970	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
7971	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
7972	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
7973	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; goto source ; source : data = dataGoodBuffer ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
7974	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7975	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
7976	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
7977	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
7978	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
7979	typedef unsigned short wchar_t; static void badSink ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 
7980	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7981	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7982	static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
7983	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
7984	void FUN ( int * * dataPtr ) { int * data = * dataPtr ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
7985	void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
7986	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7987	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
7988	static char * badSource ( char * data ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; return data ; } 
7989	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } break ; } } 	0
7990	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7991	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
7992	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } } 	1
7993	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
7994	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7995	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
7996	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
7997	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	1
7998	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
7999	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8000	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
8001	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8002	typedef long unsigned int size_t; static void badSink ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 
8003	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
8004	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
8005	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
8006	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
8007	static void FUN ( ) { int h ; char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; for ( h = 0 ; h < 1 ; h ++ ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
8008	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; return data ; } 	0
8009	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
8010	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
8011	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
8012	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8013	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8014	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
8015	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
8016	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8017	void FUN ( char * data ) { { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8018	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8019	static void FUN ( ) { int * data ; data = NULL ; data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
8020	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
8021	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8022	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8023	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B1Static = 0 ; data = goodG2B1Source ( data ) ; { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	0
8024	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
8025	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8026	static void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
8027	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } } 	0
8028	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
8029	static void FUN ( ) { int data ; data = - 1 ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = 7 ; } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
8030	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } } 	1
8031	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
8032	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
8033	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8034	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int connectSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = inet_addr ( "127.0.0.1" ) ; service . sin_port = htons ( 27015 ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( connectSocket != INVALID_int ) { CLOSE_int ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default : printLine ( STR ) ; break ; } switch ( 8 ) { case 7 : printLine ( STR ) ; break ; default : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
8035	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8036	static void * FUN ( void * data ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; return data ; } 	0
8037	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
8038	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8039	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8040	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
8041	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
8042	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goodB2GSink ( data ) ; } 	0
8043	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
8044	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8045	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
8046	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8047	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
8048	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 0 ) { printLine ( STR ) ; } else { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
8049	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
8050	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
8051	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8052	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
8053	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; memmove ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8054	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	1
8055	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
8056	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
8057	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	1
8058	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
8059	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = RAND32 ( ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
8060	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
8061	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8062	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8063	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8064	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
8065	typedef unsigned short wchar_t; void FUN ( wchar_t * dataArray [ ] ) { wchar_t * data = dataArray [ 2 ] ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
8066	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
8067	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
8068	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
8069	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8070	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8071	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	0
8072	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	1
8073	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8074	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
8075	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
8076	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; while ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
8077	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
8078	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } } 	1
8079	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8080	static void badSink ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 
8081	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = goodG2BSink ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; funcPtr ( data ) ; } 	0
8082	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	1
8083	static void FUN ( ) { int data ; data = - 1 ; data = 7 ; goodG2BStatic = 1 ; goodG2BSink ( data ) ; } 	0
8084	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
8085	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( true ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	1
8086	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
8087	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
8088	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8089	void FUN ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ; char * data = ( * dataPtr ) ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
8090	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcscat ( dest , data ) ; printWLine ( data ) ; } } 	1
8091	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8092	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
8093	static void * badSource ( void * data ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; return data ; } 
8094	void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
8095	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } } 	0
8096	void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
8097	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
8098	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
8099	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
8100	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( void * data ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
8101	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8102	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
8103	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
8104	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8105	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
8106	void FUN ( int * data ) { { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
8107	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8108	typedef unsigned short wchar_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8109	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
8110	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8111	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
8112	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
8113	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( true ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
8114	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
8115	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * * dataPtr1 = & data ; wchar_t * * dataPtr2 = & data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; { wchar_t * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; * dataPtr1 = data ; } { wchar_t * data = * dataPtr2 ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } } 	1
8116	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8117	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8118	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
8119	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
8120	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8121	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8122	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; void ( * funcPtr ) ( wchar_t * ) = badSink ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; funcPtr ( data ) ; } 	1
8123	typedef unsigned short wchar_t; static void FUN ( ) { int h ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( h = 0 ; h < 1 ; h ++ ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
8124	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
8125	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8126	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
8127	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
8128	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8129	static void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { data = 7 ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
8130	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { int i ; twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
8131	typedef signed long long int64_t ; static void badSink ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 
8132	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
8133	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; void FUN ( ) { if ( true ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	1
8134	static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
8135	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; swprintf ( data , 100 , L"%s" , source ) ; printWLine ( data ) ; } } 	1
8136	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8137	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
8138	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 5 == 5 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
8139	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
8140	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
8141	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
8142	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memmove ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	1
8143	static int FUN ( int data ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } return data ; } 	0
8144	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8145	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } 	0
8146	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; data = dataBadBuffer ; { int64_t * dataCopy = data ; int64_t * data = dataCopy ; { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } } 	1
8147	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
8148	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memcpy ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
8149	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8150	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8151	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8152	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBadBuffer ; data [ 0 ] = L'\0' ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
8153	void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = '\0' ; break ; default : printLine ( STR ) ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
8154	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8155	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * * dataPtr1 = & data ; int * * dataPtr2 = & data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; { int * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { int * data = * dataPtr2 ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } } 	0
8156	void FUN ( ) { int i ; char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
8157	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( true ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
8158	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
8159	typedef long unsigned int size_t; void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
8160	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
8161	typedef unsigned short wchar_t; void FUN ( void * dataVoidPtr ) { wchar_t * * dataPtr = ( wchar_t * * ) dataVoidPtr ; wchar_t * data = ( * dataPtr ) ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
8162	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; swprintf ( dest , wcslen ( data ) , L"%s" , data ) ; printWLine ( data ) ; } } 	0
8163	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
8164	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
8165	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 0 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8166	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
8167	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8168	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
8169	static void FUN ( char * data ) { { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
8170	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; static void FUN ( ) { if ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } } 	0
8171	typedef long unsigned int size_t; void FUN ( void * dataVoidPtr ) { int * * dataPtr = ( int * * ) dataVoidPtr ; int * data = ( * dataPtr ) ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	1
8172	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8173	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
8174	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; while ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; break ; } { char dest [ 50 ] = "" ; strncat ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8175	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8176	static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { data = 7 ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
8177	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
8178	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * data ) { { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8179	void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { char inputBuffer [ (3 * sizeof(data) + 2) ] = "" ; if ( fgets ( inputBuffer , (3 * sizeof(data) + 2) , stdin ) != NULL ) { data = atoi ( inputBuffer ) ; } else { printLine ( STR ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
8180	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; switch ( 6 ) { case 6 : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8181	typedef unsigned short wchar_t; static wchar_t * FUN ( wchar_t * data ) { if ( goodG2B2Static ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } return data ; } 	0
8182	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	0
8183	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; void * * dataPtr1 = & data ; void * * dataPtr2 = & data ; data = NULL ; { void * data = * dataPtr1 ; data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; * dataPtr1 = data ; } { void * data = * dataPtr2 ; { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
8184	typedef unsigned short wchar_t; void FUN ( wchar_t * data ) { { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8185	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { goto sink ; sink : { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } } 	1
8186	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
8187	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8188	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
8189	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8190	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataBadBuffer ; break ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	1
8191	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	0
8192	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8193	static void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; funcPtr ( data ) ; } 	0
8194	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
8195	static void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	0
8196	void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
8197	void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	1
8198	typedef unsigned short wchar_t; static wchar_t * badSource ( wchar_t * data ) { if ( badStatic ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } return data ; } 
8199	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } } 	0
8200	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; snprintf ( data , 100 , "%s" , source ) ; printLine ( data ) ; } } 	1
8201	typedef unsigned short wchar_t; static void FUN ( wchar_t * data ) { { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
8202	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 0 ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memmove ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8203	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8204	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; badStatic = 1 ; data = badSource ( data ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8205	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	0
8206	static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	0
8207	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcsncpy ( data , source , wcslen ( source ) + 1 ) ; printWLine ( data ) ; } } 	1
8208	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; memcpy ( dest , data , strlen ( data ) * sizeof ( char ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8209	typedef long unsigned int size_t; void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } } 	1
8210	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memcpy ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8211	void FUN ( char * data ) { { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	1
8212	static void badSink ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 
8213	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
8214	static void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
8215	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
8216	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
8217	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8218	static void FUN ( char * data ) { { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	0
8219	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
8220	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	0
8221	typedef signed long long int64_t ; void FUN ( int64_t * data ) { { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
8222	void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; goto source ; source : memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; { char dest [ 50 ] = "" ; snprintf ( dest , strlen ( data ) , "%s" , data ) ; printLine ( data ) ; } } 	1
8223	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	0
8224	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } } 	0
8225	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
8226	void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcat ( data , source ) ; printLine ( data ) ; } } 	1
8227	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { size_t i ; char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8228	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
8229	void FUN ( ) { int data ; data = - 1 ; if ( 1 ) { fscanf ( stdin , "%d" , & data ) ; } if ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	1
8230	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( false ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8231	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; data = dataGoodBuffer ; { int * dataCopy = data ; int * data = dataCopy ; { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } } 	0
8232	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; data = goodG2BSource ( data ) ; { char dest [ 50 ] = "" ; strncpy ( dest , data , strlen ( data ) ) ; dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	0
8233	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; data = dataBadBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } } 	1
8234	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8235	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( true ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcpy ( dest , data ) ; printLine ( data ) ; } } 	0
8236	static void FUN ( ) { int data ; data = - 1 ; if ( true ) { data = 10 ; } if ( true ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
8237	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } } 	1
8238	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
8239	typedef long unsigned int size_t; static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; { char * dataCopy = data ; char * data = dataCopy ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } } 	0
8240	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	0
8241	void FUN ( ) { char * data ; void ( * funcPtr ) ( char * ) = badSink ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; funcPtr ( data ) ; } 	1
8242	void FUN ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
8243	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
8244	typedef unsigned short wchar_t; void FUN ( ) { int i ; wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcsncat ( data , source , 100 ) ; printWLine ( data ) ; } } 	1
8245	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( true ) { data = dataBadBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	1
8246	void FUN ( ) { int * data ; int * dataBadBuffer = ( int * ) ALLOCA ( 50 * sizeof ( int ) ) ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; switch ( 6 ) { case 6 : data = dataBadBuffer ; break ; default : printLine ( STR ) ; break ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
8247	static void FUN ( ) { int data ; data = - 1 ; while ( 1 ) { data = 10 ; break ; } while ( 1 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
8248	static void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } 	0
8249	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	0
8250	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( 50 * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; if ( true ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
8251	void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
8252	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
8253	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; if ( 5 == 5 ) { { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( 5 == 5 ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
8254	static void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; if ( true ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; } } 	0
8255	typedef unsigned short  WORD;typedef struct WSAData {  WORD           wVersion;  WORD           wHighVersion;  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  char           szDescription[WSADESCRIPTION_LEN + 1];  char           szSystemStatus[WSASYS_STATUS_LEN + 1];  unsigned short iMaxSockets;  unsigned short iMaxUdpDg;  char           lpVendorInfo;} WSADATA, LPWSADATA;static void FUN ( ) { int data ; data = - 1 ; switch ( 6 ) { case 6 : { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; int listenSocket = INVALID_int ; int acceptSocket = INVALID_int ; char inputBuffer [ (3 * sizeof(data) + 2) ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , & wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket == INVALID_int ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service . sin_family = AF_INET ; service . sin_addr . s_addr = INADDR_ANY ; service . sin_port = htons ( 27015 ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == int_ERROR ) { break ; } if ( listen ( listenSocket , 5 ) == int_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket == int_ERROR ) { break ; } recvResult = recv ( acceptSocket , inputBuffer , (3 * sizeof(data) + 2) - 1 , 0 ) ; if ( recvResult == int_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '\0' ; data = atoi ( inputBuffer ) ; } while ( 0 ) ; if ( listenSocket != INVALID_int ) { CLOSE_int ( listenSocket ) ; } if ( acceptSocket != INVALID_int ) { CLOSE_int ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default : printLine ( STR ) ; break ; } switch ( 8 ) { case 7 : printLine ( STR ) ; break ; default : { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } break ; } } 	0
8256	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataBadBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; wcscat ( data , source ) ; printWLine ( data ) ; } } 	1
8257	void FUN ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strcpy ( data , source ) ; printLine ( data ) ; } } 	1
8258	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( false ) { printLine ( STR ) ; } else { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcscpy ( dest , data ) ; printWLine ( data ) ; } } 	0
8259	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; if ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { size_t i ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8260	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
8261	void FUN ( int * data ) { { int source [ 100 ] = { 0 } ; memcpy ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } 	1
8262	void FUN ( ) { int i ; char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; for ( i = 0 ; i < 1 ; i ++ ) { data = dataBadBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
8263	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; void FUN ( ) { while ( 1 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) "0123456789abcdef0123456789abcde" ; printLine ( ( char * ) structCharVoid . voidSecond ) ; memmove ( structCharVoid . charFirst , "0123456789abcdef0123456789abcde" , sizeof ( structCharVoid ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( char ) ) - 1 ] = '\0' ; printLine ( ( char * ) structCharVoid . charFirst ) ; printLine ( ( char * ) structCharVoid . voidSecond ) ; } break ; } } 	1
8264	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t dest [ 50 ] = L"" ; wcsncpy ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } } 	1
8265	static void FUN ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; while ( 1 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; break ; } { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } 	0
8266	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( 1 ) { wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; memcpy ( dest , data , wcslen ( data ) * sizeof ( wchar_t ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8267	typedef signed long long int64_t ; typedef long unsigned int size_t; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	0
8268	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } memmove ( data , source , 100 * sizeof ( twoIntsStruct ) ) ; printStructLine ( & data [ 0 ] ) ; } } 	0
8269	typedef signed long long int64_t ; static void FUN ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } 	0
8270	static void FUN ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; data = dataBuffer ; if ( 5 != 5 ) { printLine ( STR ) ; } else { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; strcat ( dest , data ) ; printLine ( data ) ; } } 	0
8271	typedef long unsigned int size_t; void FUN ( ) { int * data ; data = NULL ; if ( 1 ) { data = ( int * ) ALLOCA ( 10 ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	1
8272	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; if ( (rand() % 2) ) { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
8273	static char * FUN ( char * data ) { if ( goodG2B2Static ) { memset ( data , 'A' , 50 - 1 ) ; data [ 50 - 1 ] = '\0' ; } return data ; } 	0
8274	typedef long unsigned int size_t; static void FUN ( ) { int * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } 	0
8275	typedef struct _charVoid { char charFirst[16]; void * voidSecond; void * voidThird;} charVoid; typedef unsigned short wchar_t; static void FUN ( ) { if ( 5 == 5 ) { { charVoid structCharVoid ; structCharVoid . voidSecond = ( void * ) L"0123456789abcdef0123456789abcde" ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; memcpy ( structCharVoid . charFirst , L"0123456789abcdef0123456789abcde" , sizeof ( structCharVoid . charFirst ) ) ; structCharVoid . charFirst [ ( sizeof ( structCharVoid . charFirst ) / sizeof ( wchar_t ) ) - 1 ] = L'\0' ; printWLine ( ( wchar_t * ) structCharVoid . charFirst ) ; printWLine ( ( wchar_t * ) structCharVoid . voidSecond ) ; } } } 	0
8276	void FUN ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50 * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; { char * data = * dataPtr1 ; data = dataBadBuffer ; data [ 0 ] = '\0' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 100 ] ; memset ( source , 'C' , 100 - 1 ) ; source [ 100 - 1 ] = '\0' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = '\0' ; printLine ( data ) ; } } } 	1
8277	typedef unsigned short wchar_t; wchar_t * FUN ( wchar_t * data ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; return data ; } 	1
8278	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; goto source ; source : data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; goto sink ; sink : { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } 	1
8279	typedef long unsigned int size_t; static void FUN ( ) { int * data ; int dataBadBuffer [ 50 ] ; int dataGoodBuffer [ 100 ] ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } 	0
8280	typedef struct _twoIntsStruct{    int intOne;    int intTwo;} twoIntsStruct;typedef long unsigned int size_t; static void FUN ( ) { twoIntsStruct * data ; twoIntsStruct * dataBadBuffer = ( twoIntsStruct * ) ALLOCA ( 50 * sizeof ( twoIntsStruct ) ) ; twoIntsStruct * dataGoodBuffer = ( twoIntsStruct * ) ALLOCA ( 100 * sizeof ( twoIntsStruct ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; } { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] . intOne = 0 ; source [ i ] . intTwo = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } 	0
8281	void FUN ( ) { char * data ; char dataBadBuffer [ 10 ] ; char dataGoodBuffer [ 10 + 1 ] ; goto source ; source : data = dataBadBuffer ; data [ 0 ] = '\0' ; { char source [ 10 + 1 ] = "AAAAAAAAAA" ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } 	1
8282	static void FUN ( ) { void * data ; void ( * funcPtr ) ( void * ) = goodG2BSink ; data = NULL ; data = ( void * ) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; funcPtr ( data ) ; } 	0
8283	static void FUN ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( ( 10 ) * sizeof ( char ) ) ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( 5 == 5 ) { data = dataGoodBuffer ; data [ 0 ] = '\0' ; } { char source [ 10 + 1 ] = "AAAAAAAAAA" ; strcpy ( data , source ) ; printLine ( data ) ; } } 	0
8284	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 != 5 ) { printLine ( STR ) ; } else { data = dataGoodBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; memcpy ( data , source , ( wcslen ( source ) + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( data ) ; } } 	0
8285	typedef signed long long int64_t ; typedef long unsigned int size_t; void FUN ( int64_t * * dataPtr ) { int64_t * data = * dataPtr ; { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } 	1
8286	typedef unsigned short wchar_t; typedef long unsigned int size_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; switch ( 5 ) { case 6 : printLine ( STR ) ; break ; default : wmemset ( data , L'A' , 50 - 1 ) ; data [ 50 - 1 ] = L'\0' ; break ; } { wchar_t dest [ 50 ] = L"" ; size_t i , dataLen ; dataLen = wcslen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8287	void FUN ( int data ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } 	1
8288	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 50 ] ; wchar_t dataGoodBuffer [ 100 ] ; switch ( 6 ) { case 6 : data = dataGoodBuffer ; data [ 0 ] = L'\0' ; break ; default : printLine ( STR ) ; break ; } { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100 - 1 ) ; source [ 100 - 1 ] = L'\0' ; memmove ( data , source , 100 * sizeof ( wchar_t ) ) ; data [ 100 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	0
8289	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( wchar_t * * dataPtr ) { wchar_t * data = * dataPtr ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; size_t i , sourceLen ; sourceLen = wcslen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printWLine ( data ) ; } } 	1
8290	static void FUN ( int data ) { if ( goodG2BStatic ) { { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
8291	static void FUN ( ) { int data ; data = - 1 ; data = 10 ; { int dataCopy = data ; int data = dataCopy ; { int i ; int buffer [ 10 ] = { 0 } ; if ( data >= 0 && data < ( 10 ) ) { buffer [ data ] = 1 ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( buffer [ i ] ) ; } } else { printLine ( STR ) ; } } } } 	0
8292	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBadBuffer = ( wchar_t * ) ALLOCA ( ( 10 ) * sizeof ( wchar_t ) ) ; wchar_t * dataGoodBuffer = ( wchar_t * ) ALLOCA ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ; if ( 5 == 5 ) { data = dataBadBuffer ; data [ 0 ] = L'\0' ; } { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } 	1
8293	typedef signed long long int64_t ; void FUN ( ) { int64_t * data ; void ( * funcPtr ) ( int64_t * ) = badSink ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; data = dataBadBuffer ; funcPtr ( data ) ; } 	1
8294	typedef unsigned short wchar_t; static void FUN ( ) { wchar_t * data ; wchar_t dataBadBuffer [ 10 ] ; wchar_t dataGoodBuffer [ 10 + 1 ] ; data = dataGoodBuffer ; data [ 0 ] = L'\0' ; { wchar_t * dataCopy = data ; wchar_t * data = dataCopy ; { wchar_t source [ 10 + 1 ] = L"AAAAAAAAAA" ; wcscpy ( data , source ) ; printWLine ( data ) ; } } } 	0
8295	typedef unsigned short wchar_t; void FUN ( ) { wchar_t * data ; wchar_t * dataBuffer = ( wchar_t * ) ALLOCA ( 100 * sizeof ( wchar_t ) ) ; data = dataBuffer ; if ( true ) { wmemset ( data , L'A' , 100 - 1 ) ; data [ 100 - 1 ] = L'\0' ; } { wchar_t dest [ 50 ] = L"" ; wcsncat ( dest , data , wcslen ( data ) ) ; dest [ 50 - 1 ] = L'\0' ; printWLine ( data ) ; } } 	1
8296	typedef unsigned short wchar_t; typedef long unsigned int size_t; void FUN ( ) { void * data ; data = NULL ; if ( 5 == 5 ) { data = ( void * ) L"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; } if ( 5 == 5 ) { { size_t dataLen = strlen ( ( char * ) data ) ; void * dest = ( void * ) ALLOCA ( ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; ( void ) wcscpy ( dest , data ) ; printLine ( ( char * ) dest ) ; } } } 	1
8297	typedef long unsigned int size_t; void FUN ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 5 == 5 ) { memset ( data , 'A' , 100 - 1 ) ; data [ 100 - 1 ] = '\0' ; } { char dest [ 50 ] = "" ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = '\0' ; printLine ( data ) ; } } 	1
